using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ItrashCAN;
using System.Runtime.InteropServices;
using CM_PWR;
using System.Xml;
using System.Xml.Serialization;
using System.IO;

namespace CM_PWR__PDC
{

    public partial class CM_PWR__PDC : Form , ItrashCANPlugin
    {

        const string _PluginNameString = "CM_PWR__PDC";
       
        const int PrintfMessageHistorySize = 64;
        
        Queue<string> PrintfStorage= new Queue<string>(PrintfMessageHistorySize);

        Dictionary<string, string> PrintfDictionary = new Dictionary<string, string>();

        System.Windows.Forms.Timer MessageGeneratorTimer = new Timer();


        //These are used and holders while the can messages come in
        PDC_ChannelState[] TmpPDC_ChannelState = new PDC_ChannelState[128];
        PDC_ChannelConfiguration[] TmpPDC_ChannelConfiguration = new PDC_ChannelConfiguration[128];

        //Once all the CAN messages come in for the state and configuration, they get dumped here.
        PDC_ChannelState[]         MyPDC_ChannelState = new PDC_ChannelState[128];
        PDC_ChannelConfiguration[] MyPDC_ChannelConfiguration = new PDC_ChannelConfiguration[128];



        //THis holds the plugin state
        PDC_PluginParametersState MyPDC_PluginParametersState = new PDC_PluginParametersState();

        #region Plugin Interface

        Queue<String> _OutgoingPluginMessage = new Queue<string>(64);

        public Queue<String> OutgoingPluginMessage
        {
            get { return _OutgoingPluginMessage; }
        }

        Queue<String> _IncomingPluginMessage = new Queue<string>(64);

        public Queue<String> IncomingPluginMessage
        {
            get { return _IncomingPluginMessage; }
        }

        public CAN_INTERFACE_TYPE PluginInterfaceType
        {
            get { return CAN_INTERFACE_TYPE.READ_WRITE; }
        }

        public String PluginName
        {
            get { return _PluginNameString; }
        }

        public String PluginVersion
        {
            get { return "0.1"; }
        }

        public Image PluginImage
        {
            get { return global::CM_PWR__PDC.Properties.Resources.bender; }
        }

        int _MyInstanceID;

        public int PluginInstanceID
        {
            get { return _MyInstanceID; }
            set { _MyInstanceID = value; }
        }

        public String Init()
        {
            _IncomingCANMsgQueue = new Queue<CAN_t>(1024);
            _OutgoingCANMsgQueue = new Queue<CAN_t>(1024);
            _IncomingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage.Enqueue(_PluginNameString + " Initialized....");

            return "OK";
        }


        PluginState _State = new PluginState();

        public PluginState State
        {
            get
            {
                SaveState();

                _State.WindowLocation = this.Location;
                _State.WindowSize = this.Size;
                _State.WindowState = this.WindowState;

                XmlSerializer xmlSerializer = new XmlSerializer(MyPDC_PluginParametersState.GetType());
                StringWriter textWriter = new StringWriter();
                xmlSerializer.Serialize(textWriter, MyPDC_PluginParametersState);
                _State.PluginData = textWriter.ToString();


                return _State;
            }
            set
            {
                _State = value;

                if (_State != null)
                {
                    this.Size = _State.WindowSize;
                    this.Location = _State.WindowLocation;
                    this.WindowState = _State.WindowState;
                    this.Invalidate();

                    XmlSerializer xmlSerializer = new XmlSerializer(MyPDC_PluginParametersState.GetType());
                    StringReader textReader = new StringReader(_State.PluginData);
                    try
                    {
                        MyPDC_PluginParametersState = (PDC_PluginParametersState)xmlSerializer.Deserialize(textReader);
                    }
                    catch
                    {


                    }
                    RestoreState();

                }
            }

        }

        public String Terminate()
        {
            this.DestroyHandle();
            this.Close();
            return "OK";
        }

        public void ShowPlugin()
        {
            this.Show();
            this.BringToFront();
            this.WindowState = FormWindowState.Normal;

        }

        public void HidePlugin()
        {
            this.Hide();
        }

        Queue<CAN_t> _IncomingCANMsgQueue = new Queue<CAN_t>(1024);
        Queue<CAN_t> _OutgoingCANMsgQueue = new Queue<CAN_t>(1024);

        public Queue<CAN_t> IncomingCANMsgQueue
        {
            get { return _IncomingCANMsgQueue; }
        }

        public Queue<CAN_t> OutgoingCANMsgQueue
        {
            get { return _OutgoingCANMsgQueue; }

        }

        bool _RequestTermination = false;

        public bool RequestTermination
        {
            get { return _RequestTermination; }
        }

        #endregion

        
        public CM_PWR__PDC()
        {
            InitializeComponent();
            MessageGeneratorTimer.Interval = 10;
            MessageGeneratorTimer.Tick += MessageGeneratorTimer_Tick;
            MessageGeneratorTimer.Enabled = true;

        }

        void MessageGeneratorTimer_Tick(object sender, EventArgs e)
        {
            uint Idx;

            lock (_IncomingCANMsgQueue)
            {

                if (_IncomingCANMsgQueue.Count > 0)
                {
                    for (int i = 0; i < _IncomingCANMsgQueue.Count; i++)
                    {
                        CAN_t Msg = _IncomingCANMsgQueue.Dequeue();

                
                    //
                    if (     (CM_PWR_MessageFactory.GetSourceObjectType(Msg) == CM_PWR_ObjectTypes.PDC)
                          && (CM_PWR_MessageFactory.GetSourceObjectIndex(Msg) == ObjectIndexSelect.Value || ObjectIndexSelect.Value == (decimal)CM_PWR_Index.ALL_INDICIES))

                    
                    {
                            switch(CM_PWR_MessageFactory.GetMessageType(Msg))
                            {
                                default:

                                    break;

                                    case CM_PWR_MessageType.DEBUG_PRINTF:

                                    if (PrintfDictionary.ContainsKey(CM_PWR_MessageFactory.MakeSourceID_String(Msg)) == true)
                                    {

                                        PrintfDictionary[CM_PWR_MessageFactory.MakeSourceID_String(Msg)] += Encoding.UTF8.GetString(Msg.Data);
                                    }
                                    else
                                    {
                                        PrintfDictionary.Add(CM_PWR_MessageFactory.MakeSourceID_String(Msg),
                                                              Encoding.UTF8.GetString(Msg.Data));
                                    }

                                    string tmp = PrintfDictionary[CM_PWR_MessageFactory.MakeSourceID_String(Msg)];

                                    if(tmp.Contains("\r\n"))
                                    {
                                        PrintfDictionary[CM_PWR_MessageFactory.MakeSourceID_String(Msg)] = "";

                                        PrintfStorage.Enqueue(CM_PWR_MessageFactory.MakeSourceID_String(Msg) + " " + tmp);
                                    }

                                    break;

                                case CM_PWR_MessageType.PDC_REPORT_POWER_DISTRIBUTION_CHANNEL_CONFIGURATION1:

                                    //Since this the 1st part of the response, create a new tmp object
                                    Idx = CM_PWR_MessageFactory.GetSourceObjectIndex(Msg);

                                    TmpPDC_ChannelConfiguration[Idx] = new PDC_ChannelConfiguration();

                                    TmpPDC_ChannelConfiguration[Idx].BusIndex = Msg.Data[0];

                                    TmpPDC_ChannelConfiguration[Idx].MaximumCurrent = System.BitConverter.ToSingle(Msg.Data, 4);

                                    break;

                                case CM_PWR_MessageType.PDC_REPORT_POWER_DISTRIBUTION_CHANNEL_CONFIGURATION2:

                                    //Since this the 1st part of the response, create a new tmp object

                                    Idx = CM_PWR_MessageFactory.GetSourceObjectIndex(Msg);

                                    if (TmpPDC_ChannelConfiguration[Idx] != null)
                                    {
                                        //Only Register this message if we got the 1st part

                                        TmpPDC_ChannelConfiguration[Idx].DescriptionString = System.Text.Encoding.Default.GetString(Msg.Data);

                                        MyPDC_ChannelConfiguration[Idx] = TmpPDC_ChannelConfiguration[Idx];

                                        
                                    }

                                    break;

                                case CM_PWR_MessageType.PDC_REPORT_POWER_DISTRIBUTION_CHANNEL_STATE_1:

                                    //Since this the 1st part of the response, create a new tmp object
                                    Idx = CM_PWR_MessageFactory.GetSourceObjectIndex(Msg);

                                    TmpPDC_ChannelState[Idx] = new PDC_ChannelState();
                                    
                                    TmpPDC_ChannelState[Idx].ChannelVoltage  = System.BitConverter.ToSingle(Msg.Data, 0);
                                    TmpPDC_ChannelState[Idx].ChannelCurrent = System.BitConverter.ToSingle(Msg.Data, 4);

                                    break;

                                case CM_PWR_MessageType.PDC_REPORT_POWER_DISTRIBUTION_CHANNEL_STATE_2:

                                    //Since this the 1st part of the response, create a new tmp object

                                    Idx = CM_PWR_MessageFactory.GetSourceObjectIndex(Msg);

                                    if (TmpPDC_ChannelState[Idx] != null)
                                    {
                                        //Only Register this message if we got the 1st part

                                        TmpPDC_ChannelState[Idx].State = Msg.Data[0];

                                        MyPDC_ChannelState[Idx] = TmpPDC_ChannelState[Idx];
                                    }

                                    break;

                                case CM_PWR_MessageType.PDC_POWER_DISTRIBUTION_CONFIRMATION:
                                    
                                    Idx = CM_PWR_MessageFactory.GetSourceObjectIndex(Msg);

                                    switch((CM_PWR_PDC_ChannelState)Msg.Data[0])
                                    {
                                    
                                        case CM_PWR_PDC_ChannelState.DISABLED:
                                            if (MyPDC_ChannelState[Idx] != null) MyPDC_ChannelState[Idx].State = (byte)CM_PWR_PDC_ChannelState.DISABLED; 
                                             PrintfStorage.Enqueue(CM_PWR_MessageFactory.MakeSourceID_String(Msg) + " is reporting that its channel is now disabled\r\n");
                                        break;

                                        case CM_PWR_PDC_ChannelState.ENABLED:
                                        if (MyPDC_ChannelState[Idx] != null) MyPDC_ChannelState[Idx].State = (byte)CM_PWR_PDC_ChannelState.ENABLED;
                                             PrintfStorage.Enqueue(CM_PWR_MessageFactory.MakeSourceID_String(Msg) + " is reporting that its channel is now enabled\r\n");
                                        break;

                                        case CM_PWR_PDC_ChannelState.FAULTED:
                                        if (MyPDC_ChannelState[Idx] != null) MyPDC_ChannelState[Idx].State = (byte)CM_PWR_PDC_ChannelState.FAULTED;
                                              PrintfStorage.Enqueue(CM_PWR_MessageFactory.MakeSourceID_String(Msg) + " is reporting that its channel is now faulted\r\n");
                                        break;

                                        case CM_PWR_PDC_ChannelState.COULD_NOT_CONTROL:
                                        PrintfStorage.Enqueue(CM_PWR_MessageFactory.MakeSourceID_String(Msg) + " is reporting that its channel could not be controlled\r\n");

                                        break;

                                        default:
                                        PrintfStorage.Enqueue(CM_PWR_MessageFactory.MakeSourceID_String(Msg) + " has reported a confirmation message of 0x" + Msg.Data[0].ToString("X2") + " that is invalid\r\n");


                                        break;

                                    }

                                    break;




                            }



                        }


                    }
                }


            }


        }

        private void Form1_Load(object sender, EventArgs e)
        {
   
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void All_IndiciesCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if(All_IndiciesCheckBox.Checked == true)
            {
                ObjectIndexSelect.Value =  (Decimal)127;
            }
        }

        private void PingButton_Click(object sender, EventArgs e)
        {
            CAN_t  PingMsg = CM_PWR_MessageFactory.MakePing(CM_PWR_ObjectTypes.SDC,0,
                                                             CM_PWR_ObjectTypes.PDC,
                                                             (uint)ObjectIndexSelect.Value);

            _OutgoingCANMsgQueue.Enqueue(PingMsg);
            _IncomingCANMsgQueue.Enqueue(PingMsg);

        }

        private void FormUpdateTimers_Tick(object sender, EventArgs e)
        {
            while(PrintfStorage.Count > PrintfMessageHistorySize)
            {
                string t = PrintfStorage.Dequeue();
            }

            string Tmp= "";

            string[] Tmp2 = (string[])PrintfStorage.ToArray();

            for(int i=0;i<PrintfStorage.Count;i++)
            {

                Tmp = Tmp2[i] + Tmp;
            }

            PrintfTextBox.Text = Tmp;

            UpdateChannelConfigTextBox();

            UpdateChannelStateTextBox();

        }

        private void EnableDebugPrintfButton_Click(object sender, EventArgs e)
        {
            CAN_t Msg = CM_PWR_MessageFactory.MakeEnableDebugPrintf(CM_PWR_ObjectTypes.SDC, 0,
                                                 CM_PWR_ObjectTypes.PDC,
                                                 (uint)ObjectIndexSelect.Value);

            _OutgoingCANMsgQueue.Enqueue(Msg);
            _IncomingCANMsgQueue.Enqueue(Msg);
        }

        private void DisableDebugPrintfButton_Click(object sender, EventArgs e)
        {
            CAN_t Msg = CM_PWR_MessageFactory.MakeDisableDebugPrintf(CM_PWR_ObjectTypes.SDC, 0,
                                                                     CM_PWR_ObjectTypes.PDC,
                                                                     (uint)ObjectIndexSelect.Value);

            _OutgoingCANMsgQueue.Enqueue(Msg);
            _IncomingCANMsgQueue.Enqueue(Msg);
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void AEODRS_System_FormClosing(object sender, FormClosingEventArgs e)
        {
            _RequestTermination = true;
        }

        private void QueryChannelConfigurationButton_Click(object sender, EventArgs e)
        {
            QueryConfiguration();
        }

        private void QueryChannelStateButton_Click(object sender, EventArgs e)
        {
            QueryState();
        }

        private void EnableChannelButton_Click(object sender, EventArgs e)
        {
            CAN_t Msg = CM_PWR_MessageFactory.MakeSetPowerDistributionState(CM_PWR_ObjectTypes.SDC,0,
                                                                             (uint)ObjectIndexSelect.Value,
                                                                             CM_PWR_PDC_ChannelState.ENABLED);
            _OutgoingCANMsgQueue.Enqueue(Msg);
        }

        private void DisableChannel_Click(object sender, EventArgs e)
        {

            CAN_t Msg = CM_PWR_MessageFactory.MakeSetPowerDistributionState(CM_PWR_ObjectTypes.SDC, 0,
                                                                             (uint)ObjectIndexSelect.Value,
                                                                             CM_PWR_PDC_ChannelState.DISABLED);
            _OutgoingCANMsgQueue.Enqueue(Msg);
        }

        public void SaveState()
        {
            MyPDC_PluginParametersState.SelectedIndex = (int)ObjectIndexSelect.Value;
            MyPDC_PluginParametersState.AutoQueryConfig = AutoQueryConfigCB.Checked;
            MyPDC_PluginParametersState.AutoQueryState = AutoQueryStateCB.Checked;
        }

        public void RestoreState()
        {
            ObjectIndexSelect.Value = MyPDC_PluginParametersState.SelectedIndex ;

            AutoQueryConfigCB.Checked =   MyPDC_PluginParametersState.AutoQueryConfig;
            AutoQueryStateCB.Checked = MyPDC_PluginParametersState.AutoQueryState;
        }


        public void UpdateChannelConfigTextBox()
        {
            string T = "";

            for (int i = 0; i < MyPDC_ChannelConfiguration.Length; i++)
            {
                if(MyPDC_ChannelConfiguration[i]!= null)
                {
                    string temp =  MyPDC_ChannelConfiguration[i].DescriptionString.Replace('\0', ' ');
                    T = T + temp + " > " + " BusIndex : 0x" + MyPDC_ChannelConfiguration[i].BusIndex.ToString("X2") +
                            "  MaxCurrent : " + MyPDC_ChannelConfiguration[i].MaximumCurrent.ToString("00.00") + "Amps\r\n";
                }
            }

            ChannelConfigurationTextBox.Text = T;
        }


        public void UpdateChannelStateTextBox()
        {
            string T = "";

            for (int i = 0; i < MyPDC_ChannelState.Length; i++)
            {

                if (MyPDC_ChannelState[i] != null)
                {
                    string Description = "PDC" + i;

                    if(MyPDC_ChannelConfiguration[i]!= null)
                        Description =  MyPDC_ChannelConfiguration[i].DescriptionString.Replace('\0', ' ');


                    string State;

                    if (MyPDC_ChannelState[i].State == (byte)CM_PWR_PDC_ChannelState.FAULTED)
                        State = "[Faulted]";
                    else if (MyPDC_ChannelState[i].State == (byte)CM_PWR_PDC_ChannelState.DISABLED)
                        State = "[Disabled]";
                    else if (MyPDC_ChannelState[i].State == (byte)CM_PWR_PDC_ChannelState.ENABLED)
                        State = "[Enabled]";
                    else
                        State = "[Unknown]";

                    T = T + Description + " > " + MyPDC_ChannelState[i].ChannelVoltage.ToString("00.00") + "Volts  "
                         + MyPDC_ChannelState[i].ChannelCurrent.ToString("00.00") + "Amps " + State + "\r\n"; ;

                 
                }
            }

            ChannelStateTextBox.Text = T;
        }


        [Serializable()]
        public class PDC_PluginParametersState
        {

            public int SelectedIndex = 0;
            public bool AutoQueryConfig = false;
            public bool AutoQueryState = false;
        }

        private void AutoQueryCB_CheckedChanged(object sender, EventArgs e)
        {
            if (AutoQueryConfigCB.Checked == true)
                AutoConfigQueryTimer.Enabled = true;
            else
                AutoConfigQueryTimer.Enabled = false;
        }

        private void AutoConfigQueryTimer_Tick(object sender, EventArgs e)
        {
            QueryConfiguration();
        }

        public void QueryConfiguration()
        {
            CAN_t Msg = CM_PWR_MessageFactory.MakeQueryChannelConfiguration(CM_PWR_ObjectTypes.SDC, 0,
                                                                         (uint)ObjectIndexSelect.Value);

            _OutgoingCANMsgQueue.Enqueue(Msg);
        }

        public void QueryState()
        {
            CAN_t Msg = CM_PWR_MessageFactory.MakeQueryChannelState(CM_PWR_ObjectTypes.SDC, 0,
                                                                   (uint)ObjectIndexSelect.Value);

            _OutgoingCANMsgQueue.Enqueue(Msg);

        }

        private void AutoStateQueryCB_CheckedChanged(object sender, EventArgs e)
        {
            if (AutoQueryStateCB.Checked == true)
                AutoStateTimer.Enabled = true;
            else
                AutoStateTimer.Enabled = false;
        }

        private void AutoStateTimer_Tick(object sender, EventArgs e)
        {
            QueryState();
        }


    }


   
   
}
