using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using ItrashCAN;
using ZedGraph;

namespace EPS_Controller
{
    public partial class EPS_Controller_Surface : Form,ItrashCANPlugin
    {
        
        public EPS_Controller_Surface()
        {
            InitializeComponent();  
            InitGraphs();
            UpdateGraphs();
            InitControls();
        }



        #region Plugin Interface

        Queue<String> _OutgoingPluginMessage = new Queue<string>(64);

        public Queue<String> OutgoingPluginMessage
        {
            get { return _OutgoingPluginMessage; }
        }

        Queue<String> _IncomingPluginMessage = new Queue<string>(64);

        public Queue<String> IncomingPluginMessage
        {
            get { return _IncomingPluginMessage; }
        }

        public CAN_INTERFACE_TYPE PluginInterfaceType
        {
            get { return CAN_INTERFACE_TYPE.READ_WRITE; }
        }

        public String PluginName
        {
            get { return "EPS Controller GUI"; }
        }

        public String PluginVersion
        {
            get { return "0.1"; }
        }

        public Image PluginImage
        {
            get { return EPS_Controller.Properties.Resources.icon; }
        }

        int _MyInstanceID;

        public int PluginInstanceID
        {
            get { return _MyInstanceID; }
            set { _MyInstanceID = value; }
        }

        public String Init()
        {
            _IncomingCANMsgQueue = new Queue<CANMsg>(1024);
            _OutgoingCANMsgQueue = new Queue<CANMsg>(1024);
            _IncomingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage.Enqueue("EPS Controller GUI Plugin Initialized....");

            return "OK";
        }

        public String Terminate()
        {
            this.DestroyHandle();
            this.Close();
            return "OK";

        }

        public void ShowPlugin()
        {
            this.Show();
            this.BringToFront();
            this.WindowState = FormWindowState.Normal;

        }

        public void HidePlugin()
        {
            this.Hide();
        }

        public void MinimizePlugin()
        {
            this.Show();
            this.WindowState = FormWindowState.Minimized;
        }

        public void MaximizePlugin()
        {
            this.Show();
            this.WindowState = FormWindowState.Maximized;
        }

        Queue<CANMsg> _IncomingCANMsgQueue = new Queue<CANMsg>(128);
        Queue<CANMsg> _OutgoingCANMsgQueue = new Queue<CANMsg>(128);

        public Queue<CANMsg> IncomingCANMsgQueue
        {
            get { return _IncomingCANMsgQueue; }
        }

        public Queue<CANMsg> OutgoingCANMsgQueue
        {
            get { return _OutgoingCANMsgQueue; }

        }

        bool _RequestTermination = false;

        public bool RequestTermination
        {
            get { return _RequestTermination; }
        }

        #endregion

        #region Graph interface

        PointPairList I_TX_Bus_List = new PointPairList();
        PointPairList I_FIN_ACT_List = new PointPairList();
        PointPairList V_TX_Bus_List = new PointPairList();
        PointPairList V_FIN_ACT_List = new PointPairList();

        public const int SampleRate = 50;
        public const int TimeHistoryToKeepInit = 5;
        public const int HistoryLengthInit = TimeHistoryToKeepInit * SampleRate;

        public int HistoryLength = HistoryLengthInit;
        public int TimeHistoryToKeep = TimeHistoryToKeepInit;

        double[] I_TX_Bus_History = new double[HistoryLengthInit];
        double[] I_FIN_ACT_Bus_History = new double[HistoryLengthInit];
        double[] V_TX_Bus_History = new double[HistoryLengthInit];
        double[] V_FIN_ACT_Bus_History = new double[HistoryLengthInit];

        

        int I_TX_HistoryIndex;
        int I_FIN_ACT_HistoryIndex;
        int V_TX_HistoryIndex;
        int V_FIN_ACT_HistoryIndex;

        float I_TX_Y_Min = 0;
        float I_TX_Y_Max = 110;

        float I_FIN_ACT_Y_Min = -15;
        float I_FIN_ACT_Y_Max = 15;

        float V_disp_Y_Min = 0;
        float V_disp_Y_Max = 80;

        GraphPane I_TX_Pane = new GraphPane();
        GraphPane I_FIN_ACT_Pane = new GraphPane();
        GraphPane V_TX_FIN_ACT_Pane = new GraphPane();

        Graphics g;
        
        void InitGraphs()
        {
           
                       
            
            I_TX_Pane.Title.Text = "Transmitter Bus Current ";
            I_TX_Pane.XAxis.Title.Text = "Time (Seconds)";
            I_TX_Pane.YAxis.Title.Text = "Current (Amps)";
            I_TX_Pane.YAxis.Scale.MaxAuto = false;
            I_TX_Pane.YAxis.Scale.MinAuto = false;
            I_TX_Pane.YAxis.Scale.Min = I_TX_Y_Min;
            I_TX_Pane.YAxis.Scale.Max = I_TX_Y_Max;
            I_TX_Pane.YAxis.MajorGrid.IsVisible = true;

            I_TX_Pane.XAxis.Scale.MaxAuto = false;
            I_TX_Pane.XAxis.Scale.MinAuto = false;
            I_TX_Pane.XAxis.Scale.Min = -TimeHistoryToKeepInit;
            I_TX_Pane.XAxis.Scale.MinAuto = false;
            I_TX_Pane.XAxis.Scale.Max = 0;

            I_TX_Pane.XAxis.Scale.MaxGrace = 0.2;
            I_TX_Pane.XAxis.Scale.MinGrace = 0.2;

            I_TX_Pane.XAxis.MajorGrid.IsVisible = true;

            I_TX_Bus_Graph.MasterPane.PaneList.Clear();
            I_TX_Bus_Graph.MasterPane.PaneList.Add(I_TX_Pane);            
            
            I_TX_Pane.ReSize(g, new RectangleF(0,0,I_TX_Bus_Graph.Size.Width,I_TX_Bus_Graph.Size.Height));
            I_TX_Pane.Title.FontSpec.Size = 24;
            I_TX_Pane.XAxis.Title.FontSpec.Size = 24;
            I_TX_Pane.YAxis.Title.FontSpec.Size = 24;
            I_TX_Pane.XAxis.Scale.FontSpec.Size = 22;
            I_TX_Pane.YAxis.Scale.FontSpec.Size = 22;
            I_TX_Pane.Legend.FontSpec.Size = 22;
             
            I_FIN_ACT_Pane.Title.Text = "Fin Actuator Bus Current ";
            I_FIN_ACT_Pane.XAxis.Title.Text = "Time (Seconds)";
            I_FIN_ACT_Pane.YAxis.Title.Text = "Current (Amps)";
            I_FIN_ACT_Pane.YAxis.Scale.MaxAuto = false;
            I_FIN_ACT_Pane.YAxis.Scale.MinAuto = false;
            I_FIN_ACT_Pane.YAxis.Scale.Min = I_FIN_ACT_Y_Min;
            I_FIN_ACT_Pane.YAxis.Scale.Max = I_FIN_ACT_Y_Max;
            I_FIN_ACT_Pane.YAxis.MajorGrid.IsVisible = true;

            I_FIN_ACT_Pane.XAxis.Scale.MaxAuto = false;
            I_FIN_ACT_Pane.XAxis.Scale.MinAuto = false;
            I_FIN_ACT_Pane.XAxis.Scale.Min = -TimeHistoryToKeepInit;
            I_FIN_ACT_Pane.XAxis.Scale.MinAuto = false;
            I_FIN_ACT_Pane.XAxis.Scale.Max = 0;

            I_FIN_ACT_Pane.XAxis.Scale.MaxGrace = 0.2;
            I_FIN_ACT_Pane.XAxis.Scale.MinGrace = 0.2;

            I_FIN_ACT_Pane.XAxis.MajorGrid.IsVisible = true;

            I_FIN_ACT_Bus_Graph.MasterPane.PaneList.Clear();
            I_FIN_ACT_Bus_Graph.MasterPane.PaneList.Add(I_FIN_ACT_Pane);

            I_FIN_ACT_Pane.ReSize(g, new RectangleF(0, 0, I_FIN_ACT_Bus_Graph.Width, I_FIN_ACT_Bus_Graph.Height));
            I_FIN_ACT_Pane.Title.FontSpec.Size = 24;
            I_FIN_ACT_Pane.XAxis.Title.FontSpec.Size = 24;
            I_FIN_ACT_Pane.YAxis.Title.FontSpec.Size = 24;
            I_FIN_ACT_Pane.XAxis.Scale.FontSpec.Size = 22;
            I_FIN_ACT_Pane.YAxis.Scale.FontSpec.Size = 22;
            I_FIN_ACT_Pane.Legend.FontSpec.Size = 22;

             
            V_TX_FIN_ACT_Pane.Title.Text = "Bus Voltages";
            V_TX_FIN_ACT_Pane.XAxis.Title.Text = "Time (Seconds)";
            V_TX_FIN_ACT_Pane.YAxis.Title.Text = "Voltage (Volts)";
            V_TX_FIN_ACT_Pane.YAxis.Scale.MaxAuto = false;
            V_TX_FIN_ACT_Pane.YAxis.Scale.MinAuto = false;
            V_TX_FIN_ACT_Pane.YAxis.Scale.Min = V_disp_Y_Min;
            V_TX_FIN_ACT_Pane.YAxis.Scale.Max = V_disp_Y_Max;
            V_TX_FIN_ACT_Pane.YAxis.MajorGrid.IsVisible = true;

            V_TX_FIN_ACT_Pane.XAxis.Scale.MaxAuto = false;
            V_TX_FIN_ACT_Pane.XAxis.Scale.MinAuto = false;
            V_TX_FIN_ACT_Pane.XAxis.Scale.Min = -TimeHistoryToKeepInit;
            V_TX_FIN_ACT_Pane.XAxis.Scale.MinAuto = false;
            V_TX_FIN_ACT_Pane.XAxis.Scale.Max = 0;

            V_TX_FIN_ACT_Pane.XAxis.Scale.MaxGrace = 0.2;
            V_TX_FIN_ACT_Pane.XAxis.Scale.MinGrace = 0.2;

            V_TX_FIN_ACT_Pane.XAxis.MajorGrid.IsVisible = true;

            V_TX_FIN_ACT_Bus_Graph.MasterPane.PaneList.Clear();
            V_TX_FIN_ACT_Bus_Graph.MasterPane.PaneList.Add(V_TX_FIN_ACT_Pane);

            V_TX_FIN_ACT_Pane.ReSize(g, new RectangleF(0, 0, V_TX_FIN_ACT_Bus_Graph.Width, V_TX_FIN_ACT_Bus_Graph.Height));
            V_TX_FIN_ACT_Pane.Title.FontSpec.Size = 24;
            V_TX_FIN_ACT_Pane.XAxis.Title.FontSpec.Size = 24;
            V_TX_FIN_ACT_Pane.YAxis.Title.FontSpec.Size = 24;
            V_TX_FIN_ACT_Pane.XAxis.Scale.FontSpec.Size = 22;
            V_TX_FIN_ACT_Pane.YAxis.Scale.FontSpec.Size = 22;
            V_TX_FIN_ACT_Pane.Legend.FontSpec.Size = 22;




            I_TX_Bus_Graph.AxisChange();
            I_FIN_ACT_Bus_Graph.AxisChange();
            V_TX_FIN_ACT_Bus_Graph.AxisChange();
            
            for(int i=0; i<HistoryLength; i++)
            {
                I_TX_Bus_History[i] = 0;
                I_FIN_ACT_Bus_History[i] = 0;
                V_TX_Bus_History[i] = 0;
                V_FIN_ACT_Bus_History[i] = 0;
            }


        }


        public void Post_I_TX_Bus_Reading(double ValueIn)
        {
            I_TX_Bus_History[I_TX_HistoryIndex] = ValueIn;
            I_TX_HistoryIndex++;
            if (I_TX_HistoryIndex >= HistoryLength)
                I_TX_HistoryIndex = 0;
        }

        public void Post_I_FIN_ACT_Bus_Reading(double ValueIn)
        {
            I_FIN_ACT_Bus_History[I_FIN_ACT_HistoryIndex] = ValueIn;
            I_FIN_ACT_HistoryIndex++;
            if (I_FIN_ACT_HistoryIndex >= HistoryLength)
                I_FIN_ACT_HistoryIndex = 0;
        }

        public void Post_V_TX_Bus_Reading(double ValueIn)
        {
            V_TX_Bus_History[V_TX_HistoryIndex] = ValueIn;
            V_TX_HistoryIndex++;
            if (V_TX_HistoryIndex >= HistoryLength)
                V_TX_HistoryIndex = 0;
        }

        public void Post_V_FIN_ACT_Bus_Reading(double ValueIn)
        {
            V_FIN_ACT_Bus_History[V_FIN_ACT_HistoryIndex] = ValueIn;
            V_FIN_ACT_HistoryIndex++;
            if (V_FIN_ACT_HistoryIndex >= HistoryLength)
                V_FIN_ACT_HistoryIndex = 0;
        }

        private void UpdateGraphs()
        {
            double t = 0;

            I_TX_Pane.YAxis.Scale.Min = I_TX_Y_Min;
            I_TX_Pane.YAxis.Scale.Max = I_TX_Y_Max;
            I_TX_Pane.XAxis.Scale.Min = -TimeHistoryToKeep;

            I_FIN_ACT_Pane.YAxis.Scale.Min = I_FIN_ACT_Y_Min;
            I_FIN_ACT_Pane.YAxis.Scale.Max = I_FIN_ACT_Y_Max;
            I_FIN_ACT_Pane.XAxis.Scale.Min = -TimeHistoryToKeep;

            V_TX_FIN_ACT_Pane.YAxis.Scale.Min = V_disp_Y_Min;
            V_TX_FIN_ACT_Pane.YAxis.Scale.Max = V_disp_Y_Max;
            V_TX_FIN_ACT_Pane.XAxis.Scale.Min = -TimeHistoryToKeep;
            
            I_FIN_ACT_List.Clear();
            I_TX_Bus_List.Clear();
            V_FIN_ACT_List.Clear();
            V_TX_Bus_List.Clear();

            int CurrentI_TX_HistoryIndex = I_TX_HistoryIndex;
            int CurrentI_FIN_ACT_HistoryIndex = I_FIN_ACT_HistoryIndex;
            int CurrentV_TX_HistoryIndex = V_TX_HistoryIndex;
            int CurrentV_FIN_ACT_HistoryIndex = V_FIN_ACT_HistoryIndex;

            for (int i = 0; i < HistoryLength; i++)
            {


                t = (((double)i / (double)HistoryLength) * (double)TimeHistoryToKeep) - (double)TimeHistoryToKeep;

                I_TX_Bus_List.Add(t, I_TX_Bus_History[CurrentI_TX_HistoryIndex]);
                I_FIN_ACT_List.Add(t, I_FIN_ACT_Bus_History[CurrentI_FIN_ACT_HistoryIndex]);
                V_TX_Bus_List.Add(t, V_TX_Bus_History[CurrentV_TX_HistoryIndex]);
                V_FIN_ACT_List.Add(t, V_FIN_ACT_Bus_History[CurrentV_FIN_ACT_HistoryIndex]);

                CurrentI_TX_HistoryIndex++;
                CurrentI_FIN_ACT_HistoryIndex++;
                CurrentV_TX_HistoryIndex++;
                CurrentV_FIN_ACT_HistoryIndex++;

                if (CurrentI_TX_HistoryIndex >= HistoryLength)
                    CurrentI_TX_HistoryIndex = 0;
                if (CurrentI_FIN_ACT_HistoryIndex >= HistoryLength)
                    CurrentI_FIN_ACT_HistoryIndex = 0;
                if (CurrentV_TX_HistoryIndex >= HistoryLength)
                    CurrentV_TX_HistoryIndex = 0;
                if (CurrentV_FIN_ACT_HistoryIndex >= HistoryLength)
                    CurrentV_FIN_ACT_HistoryIndex = 0;

            }

            I_TX_Pane.CurveList.Clear();
            I_FIN_ACT_Pane.CurveList.Clear();
            V_TX_FIN_ACT_Pane.CurveList.Clear();


            I_TX_Pane.AddCurve("Transmitter Current", I_TX_Bus_List, Color.Red, SymbolType.Circle);
            I_TX_Bus_Graph.AxisChange();
            I_TX_Bus_Graph.Invalidate();

            I_FIN_ACT_Pane.AddCurve("Fin Actuator Current", I_FIN_ACT_List, Color.Blue, SymbolType.Circle);
            I_FIN_ACT_Bus_Graph.AxisChange();
            I_FIN_ACT_Bus_Graph.Invalidate();
            
            V_TX_FIN_ACT_Pane.AddCurve("Transmitter Bus Voltage", V_TX_Bus_List, Color.Red, SymbolType.Circle);
            V_TX_FIN_ACT_Pane.AddCurve("Fin Actuator Bus Voltage", V_FIN_ACT_List, Color.Blue, SymbolType.Circle);
            V_TX_FIN_ACT_Bus_Graph.AxisChange(); 
            V_TX_FIN_ACT_Bus_Graph.Invalidate();

        }

        #endregion

        #region GUI Callbacks

        double I_TX_Bus_Min = 0;
        double I_TX_Bus_Max = 0;

        double I_FIN_ACT_Bus_Min = 0;
        double I_FIN_ACT_Bus_Max = 0;

        double V_TX_Bus_Min = 0;
        double V_TX_Bus_Max = 0;

        double V_FIN_ACT_Bus_Min = 0;
        double V_FIN_ACT_Bus_Max = 0;

        
        
        private void FormUpdateTimer_Tick_1(object sender, EventArgs e)
        {
            lock (_OutgoingCANMsgQueue)
            {
                while (_IncomingCANMsgQueue.Count > 0)
                {
                    try
                    {

                        CANMsg InMsg = _IncomingCANMsgQueue.Dequeue();

                        switch ((EPS_Controller.CAN_MESSAGE_ID)InMsg.CANId)
                        {
                            case CAN_MESSAGE_ID.CAN_ID_REPONSE_MSG:
                                EPSReponseMessage RM = new EPSReponseMessage(InMsg);
                                break;

                            case CAN_MESSAGE_ID.CAN_ID_INTERNAL_MSG_1:
                                break;

                            case CAN_MESSAGE_ID.CAN_ID_INTERNAL_MSG_2:
                                break;

                            case CAN_MESSAGE_ID.CAN_ID_INTERNAL_MSG_3:

                                ushort I_TX_Bus_ADC = (ushort)(InMsg.CANData[5] + (InMsg.CANData[4] << 8));
                                double I_TX_Bus_Val = (((((double)I_TX_Bus_ADC / 4096.0f) * 5.0f)) - 2.532) / .02;
                                I_TX_Bus_Display.Text = String.Format("{0:0.0}", I_TX_Bus_Val) + " A";
                                Post_I_TX_Bus_Reading(I_TX_Bus_Val);

                                if (I_TX_Bus_Val > I_TX_Bus_Max)
                                {
                                    I_TX_Bus_Max = I_TX_Bus_Val;
                                    I_TX_Bus_Max_Disp.Text = String.Format("{0:0.0}", I_TX_Bus_Val) + " A";
                                }

                                if (I_TX_Bus_Val < I_TX_Bus_Min)
                                {
                                    I_TX_Bus_Min = I_TX_Bus_Val;
                                    I_TX_Bus_Min_Disp.Text = String.Format("{0:0.0}", I_TX_Bus_Val) + " A";
                                }

                                ushort I_FIN_ACT_ADC = (ushort)(InMsg.CANData[7] + (InMsg.CANData[6] << 8));
                                double I_FIN_ACT_Val = (((((double)I_FIN_ACT_ADC / 4096.0f) * 5.0f)) - .506) / .185;
                                I_FIN_ACT_Bus_Display.Text = String.Format("{0:0.0}", I_FIN_ACT_Val) + " A";
                                Post_I_FIN_ACT_Bus_Reading(I_FIN_ACT_Val);

                                if (I_FIN_ACT_Val > I_FIN_ACT_Bus_Max)
                                {
                                    I_FIN_ACT_Bus_Max = I_FIN_ACT_Val;
                                    I_FIN_ACT_Bus_Max_Disp.Text = String.Format("{0:0.0}", I_FIN_ACT_Val) + " A";
                                }

                                if (I_FIN_ACT_Val < I_FIN_ACT_Bus_Min)
                                {
                                    I_FIN_ACT_Bus_Min = I_FIN_ACT_Val;
                                    I_FIN_ACT_Bus_Min_Disp.Text = String.Format("{0:0.0}", I_FIN_ACT_Val) + " A";
                                }

                                break;

                            case CAN_MESSAGE_ID.CAN_ID_INTERNAL_MSG_4:
                                break;

                            case CAN_MESSAGE_ID.CAN_ID_INTERNAL_MSG_5:

                                ushort V_TX_Bus_ADC = (ushort)(InMsg.CANData[1] + (InMsg.CANData[0] << 8));
                                double V_TX_Bus_Val = (((double)V_TX_Bus_ADC / 4096.0f) * 100.22f);
                                V_TX_Bus_Display.Text = String.Format("{0:0.0}", V_TX_Bus_Val) + " V";
                                Post_V_TX_Bus_Reading(V_TX_Bus_Val);

                                if (V_TX_Bus_Val > V_TX_Bus_Max)
                                {
                                    V_TX_Bus_Max = V_TX_Bus_Val;
                                    V_TX_Bus_Max_Disp.Text = String.Format("{0:0.0}", V_TX_Bus_Val) + " V";
                                }

                                if (V_TX_Bus_Val < V_TX_Bus_Min)
                                {
                                    V_TX_Bus_Min = V_TX_Bus_Val;
                                    V_TX_Bus_Min_Disp.Text = String.Format("{0:0.0}", V_TX_Bus_Val) + " V";
                                }

                                ushort V_FIN_ACT_ADC = (ushort)(InMsg.CANData[3] + (InMsg.CANData[2] << 8));
                                double V_FIN_ACT_Val = (((double)V_FIN_ACT_ADC / 4096.0f) * 100.22f);
                                V_FIN_ACT_Bus_Display.Text = String.Format("{0:0.0}", V_FIN_ACT_Val) + " V";
                                Post_V_FIN_ACT_Bus_Reading(V_FIN_ACT_Val);

                                if (V_FIN_ACT_Val > V_FIN_ACT_Bus_Max)
                                {
                                    V_FIN_ACT_Bus_Max = V_FIN_ACT_Val;
                                    V_FIN_ACT_Bus_Max_Disp.Text = String.Format("{0:0.0}", V_FIN_ACT_Val) + " V";
                                }

                                if (V_FIN_ACT_Val < V_FIN_ACT_Bus_Min)
                                {
                                    V_FIN_ACT_Bus_Min = V_FIN_ACT_Val;
                                    V_FIN_ACT_Bus_Min_Disp.Text = String.Format("{0:0.0}", V_FIN_ACT_Val) + " V";
                                }

                                ushort V_Thermal_Batt_1_ADC = (ushort)(InMsg.CANData[7] + (InMsg.CANData[6] << 8));
                                double V_Thermal_Batt_1_Val = (((double)V_Thermal_Batt_1_ADC / 4096.0f) * 100.22f);
                                V_Thermal_Batt_1_Display.Text = String.Format("{0:0.0}", V_Thermal_Batt_1_Val) + " V";

                                break;

                            case CAN_MESSAGE_ID.CAN_ID_INTERNAL_MSG_6:

                                ushort V_Thermal_Batt_2_ADC = (ushort)(InMsg.CANData[1] + (InMsg.CANData[0] << 8));
                                double V_Thermal_Batt_2_Val = (((double)V_Thermal_Batt_2_ADC / 4096.0f) * 100.22f);
                                V_Thermal_Batt_2_Display.Text = String.Format("{0:0.0}", V_Thermal_Batt_2_Val) + " V";

                                ushort V_Thermal_Batt_3_ADC = (ushort)(InMsg.CANData[3] + (InMsg.CANData[2] << 8));
                                double V_Thermal_Batt_3_Val = (((double)V_Thermal_Batt_3_ADC / 4096.0f) * 100.22f);
                                V_Thermal_Batt_3_Display.Text = String.Format("{0:0.0}", V_Thermal_Batt_3_Val) + " V";

                                ushort T_Thermal_Batt_1_ADC = (ushort)(InMsg.CANData[5] + (InMsg.CANData[4] << 8));
                                double T_Thermal_Batt_1_X = (((double)T_Thermal_Batt_1_ADC / 4096.0f) * 5.06f);
                                double T_Thermal_Batt_1_Val = 0.6696 * Math.Pow(T_Thermal_Batt_1_X, 3) + 4.0022 * Math.Pow(T_Thermal_Batt_1_X, 2) + 87.099 * T_Thermal_Batt_1_X - 47.124;
                                T_Thermal_Batt_1_Display.Text = String.Format("{0:0.0}", T_Thermal_Batt_1_Val) + " °C";

                                ushort T_Thermal_Batt_2_ADC = (ushort)(InMsg.CANData[7] + (InMsg.CANData[6] << 8));
                                double T_Thermal_Batt_2_X = (((double)T_Thermal_Batt_2_ADC / 4096.0f) * 5.06f);
                                double T_Thermal_Batt_2_Val = 0.6696 * Math.Pow(T_Thermal_Batt_2_X, 3) + 4.0022 * Math.Pow(T_Thermal_Batt_2_X, 2) + 87.099 * T_Thermal_Batt_2_X - 47.124;
                                T_Thermal_Batt_2_Display.Text = String.Format("{0:0.0}", T_Thermal_Batt_2_Val) + " °C";

                                break;

                            case CAN_MESSAGE_ID.CAN_ID_INTERNAL_MSG_7:

                                ushort T_Thermal_Batt_3_ADC = (ushort)(InMsg.CANData[1] + (InMsg.CANData[0] << 8));
                                double T_Thermal_Batt_3_X = (((double)T_Thermal_Batt_3_ADC / 4096.0f) * 5.06f);
                                double T_Thermal_Batt_3_Val = 0.6696 * Math.Pow(T_Thermal_Batt_3_X, 3) + 4.0022 * Math.Pow(T_Thermal_Batt_3_X, 2) + 87.099 * T_Thermal_Batt_3_X - 47.124;
                                T_Thermal_Batt_3_Display.Text = String.Format("{0:0.0}", T_Thermal_Batt_3_Val) + " °C";

                                ushort T_Forward_Gas_ADC = (ushort)(InMsg.CANData[3] + (InMsg.CANData[2] << 8));
                                double T_Forward_Gas_X = (((double)T_Forward_Gas_ADC / 4096.0f) * 5.06f);
                                double T_Forward_Gas_Val = 0.6696 * Math.Pow(T_Forward_Gas_X, 3) + 4.0022 * Math.Pow(T_Forward_Gas_X, 2) + 87.099 * T_Forward_Gas_X - 47.124;
                                T_Forward_Gas_Display.Text = String.Format("{0:0.0}", T_Forward_Gas_Val) + " °C";

                                ushort T_Aft_Gas_ADC = (ushort)(InMsg.CANData[5] + (InMsg.CANData[4] << 8));
                                double T_Aft_Gas_X = (((double)T_Aft_Gas_ADC / 4096.0f) * 5.06f);
                                double T_Aft_Gas_Val = 0.0952 * Math.Pow(T_Aft_Gas_X, 3) + 0.3589 * Math.Pow(T_Aft_Gas_X, 2) + 37.192 * T_Aft_Gas_X - 47.614;
                                T_Aft_Gas_Display.Text = String.Format("{0:0.0}", T_Aft_Gas_Val) + " °C";

                                ushort T_Aft_Batt_Plate_ADC = (ushort)(InMsg.CANData[7] + (InMsg.CANData[6] << 8));
                                double T_Aft_Batt_Plate_X = (((double)T_Aft_Batt_Plate_ADC / 4096.0f) * 5.06f);
                                double T_Aft_Batt_Plate_Val = 0.0952 * Math.Pow(T_Aft_Batt_Plate_X, 3) + 0.3589 * Math.Pow(T_Aft_Batt_Plate_X, 2) + 37.192 * T_Aft_Batt_Plate_X - 47.614;
                                T_Aft_Batt_Plate_Display.Text = String.Format("{0:0.0}", T_Aft_Batt_Plate_Val) + " °C";

                                break;

                            case CAN_MESSAGE_ID.CAN_ID_INTERNAL_MSG_8:
                                break;


                        }

                        if (InMsg.CANId == (uint)CAN_MESSAGE_ID.CAN_ID_REPONSE_MSG)
                        {
                        }

                    }
                    catch (Exception Ex)
                    {
                        lock (_OutgoingPluginMessage)
                        {
                            _OutgoingPluginMessage.Enqueue(Ex.Message);
                        }
                    }
                }
            }

            UpdateGraphs();
            this.Invalidate();

        }

        private void I_TX_Y_Max_UD_ValueChanged(object sender, EventArgs e)
        {

            if (I_TX_Y_Max_UD.Value > I_TX_Y_Min_UD.Value)
            {
                I_TX_Y_Max = (float)I_TX_Y_Max_UD.Value;
                UpdateGraphs();
            }
            else
                I_TX_Y_Max_UD.Value = (decimal)I_TX_Y_Max;

        }

        private void I_TX_Y_Min_UD_ValueChanged(object sender, EventArgs e)
        {

            if (I_TX_Y_Min_UD.Value < I_TX_Y_Max_UD.Value)
            {
                I_TX_Y_Min = (float)I_TX_Y_Min_UD.Value;
                UpdateGraphs();
            }
            else
                I_TX_Y_Min_UD.Value = (decimal)I_TX_Y_Min;

        }

        private void I_FIN_ACT_Y_Max_UD_ValueChanged(object sender, EventArgs e)
        {
            if (I_FIN_ACT_Y_Max_UD.Value > I_FIN_ACT_Y_Min_UD.Value)
            {
                I_FIN_ACT_Y_Max = (float)I_FIN_ACT_Y_Max_UD.Value;
                UpdateGraphs();
            }
            else
                I_FIN_ACT_Y_Max_UD.Value = (decimal)I_FIN_ACT_Y_Max;
        }

        private void I_FIN_ACT_Y_Min_UD_ValueChanged(object sender, EventArgs e)
        {
            if (I_FIN_ACT_Y_Min_UD.Value < I_FIN_ACT_Y_Max_UD.Value)
            {
                I_FIN_ACT_Y_Min = (float)I_FIN_ACT_Y_Min_UD.Value;
                UpdateGraphs();
            }
            else
                I_FIN_ACT_Y_Min_UD.Value = (decimal)I_FIN_ACT_Y_Min;
        }

        private void V_Graph_Y_Max_UD_ValueChanged(object sender, EventArgs e)
        {
            if (V_Graph_Y_Max_UD.Value > V_Graph_Y_Min_UD.Value)
            {
                V_disp_Y_Max = (float)V_Graph_Y_Max_UD.Value;
                UpdateGraphs();
            }
            else
                V_Graph_Y_Max_UD.Value = (decimal)V_disp_Y_Max;
        }

        private void V_Graph_Y_Min_UD_ValueChanged(object sender, EventArgs e)
        {
            if (V_Graph_Y_Min_UD.Value < V_Graph_Y_Max_UD.Value)
            {
                V_disp_Y_Min = (float)V_Graph_Y_Min_UD.Value;
                UpdateGraphs();
            }
            else
                V_Graph_Y_Min_UD.Value = (decimal)V_disp_Y_Min;
        }

        private void Graph_X_Width_UD_ValueChanged(object sender, EventArgs e)
        {
            TimeHistoryToKeep = ((int)Graph_X_Width_UD.Value);
            HistoryLength = TimeHistoryToKeep * SampleRate;

            I_TX_HistoryIndex = 0;
            I_FIN_ACT_HistoryIndex = 0;
            V_TX_HistoryIndex = 0;
            V_FIN_ACT_HistoryIndex = 0;


            Array.Resize<double>(ref I_TX_Bus_History, HistoryLength);
            Array.Resize<double>(ref I_FIN_ACT_Bus_History, HistoryLength);
            Array.Resize<double>(ref V_TX_Bus_History, HistoryLength);
            Array.Resize<double>(ref V_FIN_ACT_Bus_History, HistoryLength);

            UpdateGraphs();
        }

        private void PeakValueReset_Click(object sender, EventArgs e)
        {
            ResetMinMax();
        }

        #endregion



        #region Helper Functions

        void InitControls()
        {
            I_TX_Y_Max_UD.Value = (decimal)I_TX_Y_Max;
            I_TX_Y_Min_UD.Value = (decimal)I_TX_Y_Min;
            I_FIN_ACT_Y_Max_UD.Value = (decimal)I_FIN_ACT_Y_Max;
            I_FIN_ACT_Y_Min_UD.Value = (decimal)I_FIN_ACT_Y_Min;
            V_Graph_Y_Max_UD.Value = (decimal)V_disp_Y_Max;
            V_Graph_Y_Min_UD.Value = (decimal)V_disp_Y_Min;
            Graph_X_Width_UD.Value = TimeHistoryToKeepInit;
        }

        void ResetMinMax()
        {
            I_TX_Bus_Min = 200;
            I_TX_Bus_Max = -200;

            I_FIN_ACT_Bus_Min = 200;
            I_FIN_ACT_Bus_Max = -200;

            V_TX_Bus_Min = 200;
            V_TX_Bus_Max = -200;

            V_FIN_ACT_Bus_Min = 200;
            V_FIN_ACT_Bus_Max = -200;

            I_TX_Bus_Max_Disp.Text = String.Format("{0:0.0}", I_TX_Bus_Max) + " A";
            I_TX_Bus_Min_Disp.Text = String.Format("{0:0.0}", I_TX_Bus_Min) + " A";

            I_FIN_ACT_Bus_Max_Disp.Text = String.Format("{0:0.0}", I_FIN_ACT_Bus_Max) + " A";
            I_FIN_ACT_Bus_Min_Disp.Text = String.Format("{0:0.0}", I_FIN_ACT_Bus_Min) + " A";

            V_TX_Bus_Max_Disp.Text = String.Format("{0:0.0}", V_TX_Bus_Max) + " V";
            V_TX_Bus_Min_Disp.Text = String.Format("{0:0.0}", V_TX_Bus_Min) + " V";

            V_FIN_ACT_Bus_Max_Disp.Text = String.Format("{0:0.0}", V_FIN_ACT_Bus_Max) + " V";
            V_FIN_ACT_Bus_Min_Disp.Text = String.Format("{0:0.0}", V_FIN_ACT_Bus_Min) + " V";

        }

        #endregion





    }

        

        


    
}
