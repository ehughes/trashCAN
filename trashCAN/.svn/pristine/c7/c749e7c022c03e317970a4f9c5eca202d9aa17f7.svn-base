using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ItrashCAN;

using System.Runtime.InteropServices;

namespace AEODRS_System
{
    public partial class AEODRS_System : Form , ItrashCANPlugin
    {

        const string _PluginNameString = "AEODRS_System";
        const int MessageHistorySize = 64;
        Queue<CAN_t> MessageHistoryQueue = new Queue<CAN_t>(MessageHistorySize);

        const int PrintfMessageHistorySize = 64;
        Queue<string> PrintfStorage= new Queue<string>(PrintfMessageHistorySize);

        Dictionary<string, string> PrintfDictionary = new Dictionary<string, string>();

        System.Windows.Forms.Timer MessageGeneratorTimer = new Timer();

        #region Plugin Interface

        Queue<String> _OutgoingPluginMessage = new Queue<string>(64);

        public Queue<String> OutgoingPluginMessage
        {
            get { return _OutgoingPluginMessage; }
        }

        Queue<String> _IncomingPluginMessage = new Queue<string>(64);

        public Queue<String> IncomingPluginMessage
        {
            get { return _IncomingPluginMessage; }
        }

        public CAN_INTERFACE_TYPE PluginInterfaceType
        {
            get { return CAN_INTERFACE_TYPE.READ_WRITE; }
        }

        public String PluginName
        {
            get { return _PluginNameString; }
        }

        public String PluginVersion
        {
            get { return "0.1"; }
        }

        public Image PluginImage
        {
            get { return global::AEODRS_System.Properties.Resources.bender; }
        }

        int _MyInstanceID;

        public int PluginInstanceID
        {
            get { return _MyInstanceID; }
            set { _MyInstanceID = value; }
        }

        public String Init()
        {
            _IncomingCANMsgQueue = new Queue<CAN_t>(1024);
            _OutgoingCANMsgQueue = new Queue<CAN_t>(1024);
            _IncomingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage.Enqueue(_PluginNameString + " Initialized....");

            return "OK";
        }


        PluginState _State = new PluginState();

        public PluginState State
        {
            get
            {
                _State.WindowLocation = this.Location;
                _State.WindowSize = this.Size;
                _State.WindowState = this.WindowState;

                return _State;
            }
            set
            {
                _State = value;

                if (_State != null)
                {
                    this.Size = _State.WindowSize;
                    this.Location = _State.WindowLocation;
                    this.WindowState = _State.WindowState;
                    this.Invalidate();
                }
            }

        }

        public String Terminate()
        {
            this.DestroyHandle();
            this.Close();
            return "OK";
        }

        public void ShowPlugin()
        {
            this.Show();
            this.BringToFront();
            this.WindowState = FormWindowState.Normal;

        }

        public void HidePlugin()
        {
            this.Hide();
        }

        Queue<CAN_t> _IncomingCANMsgQueue = new Queue<CAN_t>(1024);
        Queue<CAN_t> _OutgoingCANMsgQueue = new Queue<CAN_t>(1024);

        public Queue<CAN_t> IncomingCANMsgQueue
        {
            get { return _IncomingCANMsgQueue; }
        }

        public Queue<CAN_t> OutgoingCANMsgQueue
        {
            get { return _OutgoingCANMsgQueue; }

        }

        bool _RequestTermination = false;

        public bool RequestTermination
        {
            get { return _RequestTermination; }
        }

        #endregion

        
        public AEODRS_System()
        {
            InitializeComponent();
            MessageGeneratorTimer.Interval = 10;
            MessageGeneratorTimer.Tick += MessageGeneratorTimer_Tick;
            MessageGeneratorTimer.Enabled = true;

            ObjectSelectDropDown.Items.Clear();

            ObjectSelectDropDown.Items.AddRange((string [])Enum.GetNames(typeof(CM_PWR_ObjectTypes)));

            ObjectSelectDropDown.SelectedItem = CM_PWR_ObjectTypes.ALL_OBJECTS.ToString();
            
        }

        void MessageGeneratorTimer_Tick(object sender, EventArgs e)
        {
            lock (_IncomingCANMsgQueue)
            {

                if (_IncomingCANMsgQueue.Count > 0)
                {
                    for (int i = 0; i < _IncomingCANMsgQueue.Count; i++)
                    {
                        CAN_t Msg = _IncomingCANMsgQueue.Dequeue();
                        
                        while (MessageHistoryQueue.Count > MessageHistorySize)
                        {
                            CAN_t Tmp = MessageHistoryQueue.Dequeue();
                        }

                        MessageHistoryQueue.Enqueue(Msg);


                        //Parse messages.

                        if (    (CM_PWR_MessageFactory.GetDestinationObjectIndex(Msg) == 0 || CM_PWR_MessageFactory.GetDestinationObjectIndex(Msg) == (uint)CM_PWR_Index.ALL_INDICIES)
                            && (CM_PWR_MessageFactory.GetDestinationObjectType(Msg) == CM_PWR_ObjectTypes.SDC || CM_PWR_MessageFactory.GetDestinationObjectType(Msg) == CM_PWR_ObjectTypes.ALL_OBJECTS))
                        {

                            switch(CM_PWR_MessageFactory.GetMessageType(Msg))
                            {
                                default:

                                    break;

                                    case CM_PWR_SystemMessageTypes.DEBUG_PRINTF:

                                    if (PrintfDictionary.ContainsKey(CM_PWR_MessageFactory.MakeSourceID_String(Msg)) == true)
                                    {

                                        PrintfDictionary[CM_PWR_MessageFactory.MakeSourceID_String(Msg)] += Encoding.UTF8.GetString(Msg.Data);
                                    }
                                    else
                                    {
                                        PrintfDictionary.Add(CM_PWR_MessageFactory.MakeSourceID_String(Msg),
                                                              Encoding.UTF8.GetString(Msg.Data));
                                    }


                                    string tmp = PrintfDictionary[CM_PWR_MessageFactory.MakeSourceID_String(Msg)];

                                    if(tmp.Contains("\r\n"))
                                    {
                                        PrintfDictionary[CM_PWR_MessageFactory.MakeSourceID_String(Msg)] = "";

                                        PrintfStorage.Enqueue(CM_PWR_MessageFactory.MakeSourceID_String(Msg) + " " + tmp);
                                    }

                                    
                                    break;

                            }



                        }


                    }

                    UpdateSystemMessageHistoryGrid();
                }


            }


        }

        private void Form1_Load(object sender, EventArgs e)
        {
   
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void All_IndiciesCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if(All_IndiciesCheckBox.Checked == true)
            {
                ObjectIndexSelect.Value =  (Decimal)127;
            }
        }

        private void PingButton_Click(object sender, EventArgs e)
        {
            CAN_t  PingMsg = CM_PWR_MessageFactory.MakePing(CM_PWR_ObjectTypes.SDC,0,
                                                             (CM_PWR_ObjectTypes)Enum.Parse(typeof(CM_PWR_ObjectTypes),(string)ObjectSelectDropDown.SelectedItem),
                                                             (uint)ObjectIndexSelect.Value);

            _OutgoingCANMsgQueue.Enqueue(PingMsg);
            _IncomingCANMsgQueue.Enqueue(PingMsg);

        }
        
        void UpdateSystemMessageHistoryGrid()
        {

            string tmp ="";
            string tmp2 = "";

            CAN_t[] MessageHistoryArray = (CAN_t[])MessageHistoryQueue.ToArray();

            Array.Reverse(MessageHistoryArray);

            for (int i = 0; i < MessageHistoryArray.Length; i++)
            {

                tmp = "[Source] " + CM_PWR_MessageFactory.MakeSourceID_String(MessageHistoryArray[i]);

                if (tmp.Length < 52)
                    tmp += new String(' ', 52 - tmp.Length);

                tmp += "[Destination] " + CM_PWR_MessageFactory.MakeDestinationID_String(MessageHistoryArray[i]) +

                    " (" + CM_PWR_MessageFactory.GetMessageType(MessageHistoryArray[i]).ToString() + ")\r\n";

                 tmp2 += tmp;
            }

            SystemMessagesTextBox.Text = tmp2;

          

        }

        private void FormUpdateTimers_Tick(object sender, EventArgs e)
        {
            while(PrintfStorage.Count > PrintfMessageHistorySize)
            {
                string t = PrintfStorage.Dequeue();
            }

            string Tmp= "";

            string[] Tmp2 = (string[])PrintfStorage.ToArray();

            for(int i=0;i<PrintfStorage.Count;i++)
            {

                Tmp = Tmp2[i] + Tmp;
            }

            PrintfTextBox.Text = Tmp;
        }

        private void EnableDebugPrintfButton_Click(object sender, EventArgs e)
        {
            CAN_t Msg = CM_PWR_MessageFactory.MakeEnableDebugPrintf(CM_PWR_ObjectTypes.SDC, 0,
                                                 (CM_PWR_ObjectTypes)Enum.Parse(typeof(CM_PWR_ObjectTypes), (string)ObjectSelectDropDown.SelectedItem),
                                                 (uint)ObjectIndexSelect.Value);

            _OutgoingCANMsgQueue.Enqueue(Msg);
            _IncomingCANMsgQueue.Enqueue(Msg);
        }

        private void DisableDebugPrintfButton_Click(object sender, EventArgs e)
        {
            CAN_t Msg = CM_PWR_MessageFactory.MakeDisableDebugPrintf(CM_PWR_ObjectTypes.SDC, 0,
                                          (CM_PWR_ObjectTypes)Enum.Parse(typeof(CM_PWR_ObjectTypes), (string)ObjectSelectDropDown.SelectedItem),
                                          (uint)ObjectIndexSelect.Value);

            _OutgoingCANMsgQueue.Enqueue(Msg);
            _IncomingCANMsgQueue.Enqueue(Msg);
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void AEODRS_System_FormClosing(object sender, FormClosingEventArgs e)
        {
            _RequestTermination = true;
        }
        
    }



   
}
