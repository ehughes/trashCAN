<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=EN-US>

<div class=WordSection1>

<p class=MsoNormal style='text-align:justify'><b><span style='font-family:"Verdana","sans-serif"'>trashCAN</span></b></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:9.0pt;
line-height:115%;font-family:"Tahoma","sans-serif"'>trashCAN is a plugin based
GUI that can be used for experimenting with CAN devices.   The trashCAN host program
loads plugins that create virtual CAN nodes that communicate on a virtual CAN
bus.   Each plugin can be thought of as an independent node on a CAN bus.   If a
plugin sends out a message, all other plugins will receive it and vice-versa. 
trashCAN is essentially the plugin loader and message router.   A plugin is a
.net dll that is placed in the “plugins” folder relative to the trashCAN.exe
file.   When trashCAN.exe is started, it will parse the Plugin directory and
all of its subdirectories looking for .net assemblies that have the <b>ItrashCANPlugin</b>
interface.  If the assembly implements the correct interface, it can be instantiated
from the plugins menu.  Plugins can be instantiated as many times you the user
wants.</span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:9.0pt;
line-height:115%;font-family:"Tahoma","sans-serif"'>Plugins communicate with
other CAN nodes via a set of CAN message queues.   When a plugin wants to send
a message it places message in its outgoing queue.   The trashCAN message
router will interface to all of the plugin queues and distribution messages
accordingly.   Plugins can also send generic messages to the trashCAN router
and other plugins in the form of strings.   These messages will be logged by
trashCAN and viewable in simple text window.  Each plugin will have a set of
string queues in its interface for passing these messages.  The plugin
interface has a handful of methods and properties that must be created.   See
the CAN.cs for the interface definition.   Use the ItrashCAN.dll in the binary
distribution when creating your own plugins.</span></p>

<p class=MsoNormal><span style='font-family:"Verdana","sans-serif"'>&nbsp;</span></p>

</div>

</body>

</html>
