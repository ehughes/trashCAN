using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ItrashCAN;
using J1939_Routines;
using System.Threading;

namespace J1939_AddressClaim
{
    public partial class J1939_AddressClaim : Form , ItrashCANPlugin
    {

        const string _PluginNameString = "J1939 Address Claim";

        const int MsgDisplayHistory = 64;
        Queue <String> MsgDisplayQueue = new Queue<string>();

        byte MyAddress = 0;

        UInt32 J1939_ProcessTick = 0;

        void PostMessage(string S)
        {
            while(MsgDisplayQueue.Count>=MsgDisplayHistory)
            {
                string t = MsgDisplayQueue.Dequeue();
            }

            MsgDisplayQueue.Enqueue(S);

            string[] Lines = (string[])MsgDisplayQueue.ToArray();

            for(int i=0; i<Lines.Length;i++)
            {
                StatusMessageTextBox.Text = Lines[i] + "\r\n" + StatusMessageTextBox.Text;
            }

        }


        enum J1939_State
        {
            ADDRESS_NOT_CLAIMED = 0,
            ADDRESS_REQUEST = 1,
            ADDRESS_WAITING_FOR_RESPONSE = 2,
            ADDRESS_LAST_REQUEST_DENIED = 3,
            ADDRESS_CLAIMED = 4
        }

        J1939_State MyJ1939_State = J1939_State.ADDRESS_NOT_CLAIMED;

        #region Plugin Interface

        Queue<String> _OutgoingPluginMessage = new Queue<string>(64);

        public Queue<String> OutgoingPluginMessage
        {
            get { return _OutgoingPluginMessage; }
        }

        Queue<String> _IncomingPluginMessage = new Queue<string>(64);

        public Queue<String> IncomingPluginMessage
        {
            get { return _IncomingPluginMessage; }
        }

        public CAN_INTERFACE_TYPE PluginInterfaceType
        {
            get { return CAN_INTERFACE_TYPE.READ_WRITE; }
        }

        public String PluginName
        {
            get { return _PluginNameString; }
        }

        public String PluginVersion
        {
            get { return "0.1"; }
        }

        public Image PluginImage
        {
            get { return global::J1939_AddressClaim.Properties.Resources.claim; }
        }

        int _MyInstanceID;

        public int PluginInstanceID
        {
            get { return _MyInstanceID; }
            set { _MyInstanceID = value; }
        }

        public String Init()
        {
            _IncomingCANMsgQueue = new Queue<CAN_t>(1024);
            _OutgoingCANMsgQueue = new Queue<CAN_t>(1024);
            _IncomingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage.Enqueue(_PluginNameString + " Initialized....");

            return "OK";
        }


        PluginState _State = new PluginState();

        public PluginState State
        {
            get
            {
                _State.WindowLocation = this.Location;
                _State.WindowSize = this.Size;
                _State.WindowState = this.WindowState;

                return _State;
            }
            set
            {
                _State = value;

                if (_State != null)
                {
                    this.Size = _State.WindowSize;
                    this.Location = _State.WindowLocation;
                    this.WindowState = _State.WindowState;
                    this.Invalidate();
                }
            }

        }

        public String Terminate()
        {
            this.DestroyHandle();
            this.Close();
            return "OK";
        }

        public void ShowPlugin()
        {
            this.Show();
            this.BringToFront();
            this.WindowState = FormWindowState.Normal;

        }

        public void HidePlugin()
        {
            this.Hide();
        }

        Queue<CAN_t> _IncomingCANMsgQueue = new Queue<CAN_t>(1024);
        Queue<CAN_t> _OutgoingCANMsgQueue = new Queue<CAN_t>(1024);

        public Queue<CAN_t> IncomingCANMsgQueue
        {
            get { return _IncomingCANMsgQueue; }
        }

        public Queue<CAN_t> OutgoingCANMsgQueue
        {
            get { return _OutgoingCANMsgQueue; }

        }

        bool _RequestTermination = false;

        public bool RequestTermination
        {
            get { return _RequestTermination; }
        }

        #endregion

        
        public J1939_AddressClaim()
        {
            InitializeComponent();
            J1939_ChangeState(J1939_State.ADDRESS_NOT_CLAIMED);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            
        }

        private void MsgCheckTimer_Tick(object sender, EventArgs e)
        {
            if (_IncomingCANMsgQueue != null)
            {
                lock (_IncomingCANMsgQueue)
                {
                      while (_IncomingCANMsgQueue.Count > 0)
                      {
                          J1939_MessageParser(_IncomingCANMsgQueue.Dequeue());
                      }
                }
            }
        }

        private void FormUpdateTimer_Tick(object sender, EventArgs e)
        {
            switch (MyJ1939_State)
            {
                default:
                    AddressClaimButton.Text = "Claim Address";
                    break;

                case J1939_State.ADDRESS_NOT_CLAIMED:
                    AddressClaimButton.Text = "Claim Address";
                    break;
                case J1939_State.ADDRESS_REQUEST:
                    AddressClaimButton.Text = "Requesting...";
                    break;
                case J1939_State.ADDRESS_WAITING_FOR_RESPONSE:
                    AddressClaimButton.Text = "Requesting...";
                    break;
                case J1939_State.ADDRESS_LAST_REQUEST_DENIED:
                    AddressClaimButton.Text = "Claim Address";
                    break;
                case J1939_State.ADDRESS_CLAIMED:
                    AddressClaimButton.Text = "Release Claim";
                    break;

            }
           
        }


        void J1939_ChangeState(J1939_State NextState)
        {

            switch (NextState)
            {
                default:
                    MyJ1939_State = J1939_State.ADDRESS_NOT_CLAIMED;
                    break;

                case J1939_State.ADDRESS_NOT_CLAIMED:
                    PostMessage("Moving to State ADDRESS_NOT_CLAIMED");
                    MyJ1939_State = J1939_State.ADDRESS_NOT_CLAIMED;
                    break;
                case J1939_State.ADDRESS_REQUEST:
            
                    MyJ1939_State = J1939_State.ADDRESS_REQUEST;
                    PostMessage("Requesting Address");
                    break;
                case J1939_State.ADDRESS_WAITING_FOR_RESPONSE:
                    J1939_ProcessTick = 0;
                    MyJ1939_State = J1939_State.ADDRESS_WAITING_FOR_RESPONSE;
                    PostMessage("Waiting for reponse....");
                    break;
                case J1939_State.ADDRESS_LAST_REQUEST_DENIED:
                    MyJ1939_State = J1939_State.ADDRESS_LAST_REQUEST_DENIED;
                    PostMessage("Last request for " + AddressToClaim.Value.ToString() + " denied");
                    break;
                case J1939_State.ADDRESS_CLAIMED:
                    MyJ1939_State = J1939_State.ADDRESS_CLAIMED;
                    PostMessage("Address " + MyAddress + " Claimed!");
                    break;

            }

        }


        void J1939_Process()
        {
        switch(MyJ1939_State)
            {
                default:
                break;

                 case   J1939_State.ADDRESS_NOT_CLAIMED:
                    break;
                 case   J1939_State.ADDRESS_REQUEST:
            
                    //if we are here then we need to send out a message requesting an address
                    _OutgoingCANMsgQueue.Enqueue(J1939.MakeAddressClaimedMessage((byte)AddressToClaim.Value));

                    //Next wait for a response for up to a second to see if someone else has the address.
                    J1939_ChangeState(J1939_State.ADDRESS_WAITING_FOR_RESPONSE);
                   
                    break;
                 case   J1939_State.ADDRESS_WAITING_FOR_RESPONSE:

                    if (J1939_ProcessTick >= 25)
                    {
                        MyAddress = (byte)AddressToClaim.Value;
                        //the J1939 Spec says we only have to wait 250mSec before we can have the address!
                        J1939_ChangeState(J1939_State.ADDRESS_CLAIMED); 
                    }

                    break;
                 case   J1939_State.ADDRESS_LAST_REQUEST_DENIED:
                    break;
                 case   J1939_State.ADDRESS_CLAIMED:
                break;
           
            }
        }

        void J1939_MessageParser(CAN_t NextMsg)
        {
            switch(J1939.GetPGN_FromPDU(NextMsg.ID))
            {
                case J1939.PGN.ADDRESS_CLAIMED:

                    if (MyJ1939_State == J1939_State.ADDRESS_WAITING_FOR_RESPONSE)
                    {
                        if (J1939.GetSourceAddress_FromPDU(NextMsg.ID) == 254)
                        {
                            PostMessage("Someone responded that " + AddressToClaim.Value.ToString() + " is taken");
                               //If we are here then we recieved an Address Claimed message from someone else and we cannot use it
                            J1939_ChangeState(J1939_State.ADDRESS_LAST_REQUEST_DENIED); 
                        }
                    }
                    else if (MyJ1939_State == J1939_State.ADDRESS_CLAIMED)
                    {
                        //Since the same PGNB is used to request and deny an address claim, we will check to see if the request is for us

                        if (J1939.GetSourceAddress_FromPDU(NextMsg.ID) == MyAddress)
                        {
                            //Table 2 in J1939-81 says I have to send back a 254 as a Source address to indicate the 

                            Random R = new Random();
                            PostMessage("Someone wants my address...  No soup for you!");
                            //Add a psuedo random delay
                            Thread.Sleep(R.Next(50));
                            _OutgoingCANMsgQueue.Enqueue(J1939.MakeAddressClaimedMessage(254));
                        }

                    }

                    break;
            }

        }

        private void J1939_ProcessTImer_Tick(object sender, EventArgs e)
        {
            J1939_ProcessTick++;
            J1939_Process();
            
        }

        private void AddressClaimButton_Click(object sender, EventArgs e)
        {
            if(MyJ1939_State == J1939_State.ADDRESS_LAST_REQUEST_DENIED || MyJ1939_State == J1939_State.ADDRESS_NOT_CLAIMED)
            {
                J1939_ChangeState(J1939_State.ADDRESS_REQUEST);

            }
            else if(MyJ1939_State == J1939_State.ADDRESS_CLAIMED)
            {
                J1939_ChangeState(J1939_State.ADDRESS_NOT_CLAIMED);

            }
        }
    }
}
