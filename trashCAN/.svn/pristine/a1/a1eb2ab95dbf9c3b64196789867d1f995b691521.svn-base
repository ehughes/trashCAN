using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Reflection;
using System.Collections;
using ItrashCAN;
using System.Threading;

namespace trashCAN
{
    public partial class trashCANHost : Form
    {
        SysLog CANHostLog = new SysLog();
        SysLog PluginMessageLog = new SysLog();
        PluginInfoList Plugins = new PluginInfoList();

        const string RootPluginPath = "PLUGINS";
        ArrayList AvailablePlugins = new ArrayList();
        ArrayList ActivePlugins = new ArrayList();
        int LastInstanceID = 0;
        Thread PluginProcessThread;
        System.Windows.Forms.Timer PluginHousekeepingTimer = new System.Windows.Forms.Timer();
        InstanceMonitor MyInstanceMonitor = new InstanceMonitor();
        bool KillAllThreads = false;
        About MyAboutForm = new About();

        public trashCANHost(string [] args)
        {
            InitializeComponent();

            CANHostLog.Text = "CAN Host Plugin Log";
            PluginMessageLog.Text = "Plugin Output Message Log";

            CANHostLog.Write("Starting Host....");
            try
            {
                HostInit(args);
                if (AvailablePlugins.Count == 0)
                {
                    trashCANMainMenuStrip.Items["pluginsToolStripMenuItem"].Enabled = false;
                }
                else
                {
                    trashCANMainMenuStrip.Items["pluginsToolStripMenuItem"].Enabled = true;
                }
                
            }
            catch(Exception Ex)
            {
                MessageBox.Show(Ex.Message, "Exception during Initialization");
                CANHostLog.Write(Ex.Message);
            }
        }

        void HostInit(string [] args)
        {
            //add any plugins sent as arguments
            foreach(string file in args)
            {
                foreach(UsablePluginInfo PluginInfo in CheckDLLForValidCANNodePlugin(file))
                {
                    AvailablePlugins.Add(PluginInfo);
                }
            }

          
           //add plugins foundin local folder
           AvailablePlugins.AddRange(CheckForNodePlugins());

            if (AvailablePlugins == null || AvailablePlugins.Count == 0)
            {
                CANHostLog.Write("No Plugins Found in " + RootPluginPath);
                return;
            }

            pluginsToolStripMenuItem.DropDownItems.Clear();
       
            foreach (UsablePluginInfo PR in AvailablePlugins)
            {
                CANHostLog.Write(PR.PluginDataType.Name + " found in " + Path.GetFileName(PR.AssemblyLocation));

                ToolStripMenuItem MI = new ToolStripMenuItem();

                MI.Enabled = true;
                MI.Name = PR.Name + ">" + PR.Version;
                MI.Click += new EventHandler(MI_Click);
                MI.Text = PR.Name;
                MI.Image = PR.Image;
                MI.ToolTipText = "Version: " + PR.Version;
                pluginsToolStripMenuItem.DropDownItems.Add(MI);
            }

            ActivePlugins = new ArrayList();
            LastInstanceID = 0;

            PluginProcessThread = new Thread(new ThreadStart(PluginProcessLoop));

            CANHostLog.Write("Starting PluginProcessThread.....");
            PluginProcessThread.Start();

            PluginHousekeepingTimer.Tick += new EventHandler(PluginHousekeepingTimer_Tick);
            PluginHousekeepingTimer.Interval = 100;
            PluginHousekeepingTimer.Start();
        }

        void PluginHousekeepingTimer_Tick(object sender, EventArgs e)
        {
            CheckForPluginTerminationRequests();
            
            //Check to see if the instance monitor wants to destroy anything

            if(MyInstanceMonitor.InstanceDestructionQueue.Count>0)
            {
                for(int i = 0; i<MyInstanceMonitor.InstanceDestructionQueue.Count;i++)
                {
                    AttemptToDestroyInstance(MyInstanceMonitor.InstanceDestructionQueue.Dequeue());
                }
                UpdateInstanceGrid();
            }

            //Check to see if the instance monitor show anything

            if (MyInstanceMonitor.InstanceShowQueue.Count > 0)
            {
                for (int i = 0; i < MyInstanceMonitor.InstanceShowQueue.Count; i++)
                {
                    int Instance = MyInstanceMonitor.InstanceShowQueue.Dequeue();
                    foreach (PluginInstanceRecord P in ActivePlugins)
                    {
                        if (P.PluginInstanceID == Instance)
                        {
                            P.Plugin.ShowPlugin();
                            CANHostLog.Write("calling ShowPlugin() on instance " + Instance);
                        }
                    }
                }

                UpdateInstanceGrid();
            }


        }

        void AddPluginToPool(string NameWithVersion)
        {
            PluginInstanceRecord NewPluginInstance = new PluginInstanceRecord();
            UsablePluginInfo SelectedPlugin = null;

            try
            {

                foreach (UsablePluginInfo Plugin in AvailablePlugins)
                {
                    if (Plugin.Name + ">" + Plugin.Version == NameWithVersion)
                    {
                        SelectedPlugin = Plugin;
                        break;
                    }
                }

                if (SelectedPlugin == null)
                {
                    CANHostLog.Write("Could not match " + NameWithVersion + " to available plugins");
                    return;
                }

                CANHostLog.Write("Assigning Instance ID of " + LastInstanceID + " to a new instance of " +
                                  SelectedPlugin.Name + " " + SelectedPlugin.Version);

                NewPluginInstance.PluginInstanceID = LastInstanceID++;
                

                CANHostLog.Write("Loading assembly " + Path.GetFileName(SelectedPlugin.AssemblyLocation));
                Assembly MyAssembly = Assembly.LoadFrom(Path.GetFullPath(SelectedPlugin.AssemblyLocation));

                CANHostLog.Write("Instantiating new instance of " + SelectedPlugin.Name);
                NewPluginInstance.Plugin = (ItrashCANPlugin)MyAssembly.CreateInstance(SelectedPlugin.PluginDataType.ToString());

                CANHostLog.Write("Calling Init()...");

                if (NewPluginInstance.Plugin.Init() != "OK")
                {
                    CANHostLog.Write("Init() did not return 'OK'.  Terminating Instance");
                    return;
                }

                NewPluginInstance.Plugin.PluginInstanceID = NewPluginInstance.PluginInstanceID;

                CANHostLog.Write("Init() successful. Adding Instance to pool");

                //Check to see if the plugin has a valid image
               

                NewPluginInstance.Plugin.ShowPlugin();
                NewPluginInstance.Plugin.IncomingPluginMessage.Enqueue("You have been plugged in! Instance ID: " + NewPluginInstance.PluginInstanceID);
                NewPluginInstance.Plugin.CopyNumber = Plugins.Add(NameWithVersion, NewPluginInstance.Plugin.Position);
                ActivePlugins.Add(NewPluginInstance);
                UpdateInstanceGrid();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                CANHostLog.Write(Ex.Message);
            }

        }
        void AddPluginToPool(string NameWithVersion, UInt16 pCopyNumber, Rectangle pRect)
        {
            PluginInstanceRecord NewPluginInstance = new PluginInstanceRecord();
            UsablePluginInfo SelectedPlugin = null;

            try
            {

                foreach (UsablePluginInfo Plugin in AvailablePlugins)
                {
                    if (Plugin.Name + ">" + Plugin.Version == NameWithVersion)
                    {
                        SelectedPlugin = Plugin;
                        break;
                    }
                }

                if (SelectedPlugin == null)
                {
                    CANHostLog.Write("Could not match " + NameWithVersion + " to available plugins");
                    return;
                }

                CANHostLog.Write("Assigning Instance ID of " + LastInstanceID + " to a new instance of " +
                                  SelectedPlugin.Name + " " + SelectedPlugin.Version);

                NewPluginInstance.PluginInstanceID = LastInstanceID++;


                CANHostLog.Write("Loading assembly " + Path.GetFileName(SelectedPlugin.AssemblyLocation));
                Assembly MyAssembly = Assembly.LoadFrom(Path.GetFullPath(SelectedPlugin.AssemblyLocation));

                CANHostLog.Write("Instantiating new instance of " + SelectedPlugin.Name);
                NewPluginInstance.Plugin = (ItrashCANPlugin)MyAssembly.CreateInstance(SelectedPlugin.PluginDataType.ToString());

                CANHostLog.Write("Calling Init()...");

                if (NewPluginInstance.Plugin.Init() != "OK")
                {
                    CANHostLog.Write("Init() did not return 'OK'.  Terminating Instance");
                    return;
                }

                NewPluginInstance.Plugin.PluginInstanceID = NewPluginInstance.PluginInstanceID;

                CANHostLog.Write("Init() successful. Adding Instance to pool");

                //Check to see if the plugin has a valid image


                NewPluginInstance.Plugin.ShowPlugin();

                NewPluginInstance.Plugin.IncomingPluginMessage.Enqueue("You have been plugged in! Instance ID: " + NewPluginInstance.PluginInstanceID);
                //NewPluginInstance.Plugin.CopyNumber = pCopyNumber;
                NewPluginInstance.Plugin.Position = pRect;
                NewPluginInstance.Plugin.RestoreData();
                NewPluginInstance.Plugin.CopyNumber = pCopyNumber;
                ActivePlugins.Add(NewPluginInstance);
                UpdateInstanceGrid();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                CANHostLog.Write(Ex.Message);
            }

        }

        ArrayList CheckForNodePlugins()
        {
        
           ArrayList UsablePlugins = new ArrayList();

           if (Directory.Exists(RootPluginPath) == false)
           {
               Directory.CreateDirectory(RootPluginPath);
               return UsablePlugins;
           }

           string appPath = Path.GetDirectoryName(Application.ExecutablePath);


            foreach (string PluginFile in Directory.GetFiles(Path.Combine(appPath, RootPluginPath),"*.dll",SearchOption.AllDirectories))
           {
               foreach (UsablePluginInfo P in CheckDLLForValidCANNodePlugin(PluginFile))
               {
                   UsablePlugins.Add(P);
               }
           }
           
            return UsablePlugins;
        }

        ArrayList CheckDLLForValidCANNodePlugin(string PluginFile)
        {
            Assembly MyAssembly;
            ArrayList PluginInfo = new ArrayList();
            AppDomainSetup a = new AppDomainSetup();
            
            try
            {
               
                MyAssembly = Assembly.LoadFrom(Path.GetFullPath(PluginFile));
                foreach (Type PluginType in MyAssembly.GetTypes())
                {
                    //Check to see if the plugin is supported
                    if (typeof(ItrashCAN.ItrashCANPlugin).IsAssignableFrom(PluginType))
                    {
                        ItrashCANPlugin GetPluginData = (ItrashCANPlugin)MyAssembly.CreateInstance(PluginType.ToString());

                        Image PluginImage;

                        if (GetPluginData.PluginImage == null)
                            PluginImage = trashCAN.Properties.Resources.Gear;
                        else
                            PluginImage = GetPluginData.PluginImage;


                        PluginInfo.Add(new UsablePluginInfo(PluginType, PluginFile, GetPluginData.PluginVersion,
                                                            GetPluginData.PluginName, PluginImage));
                        GetPluginData = null;
                    }
                }
            }
            catch(Exception Ex)
            {
                CANHostLog.Write(PluginFile +  ":" + Ex.Message);
            }

            return PluginInfo;
        }

        #region Message Routing

        void PluginProcessLoop()
        {
            while (true)
            {
                if (KillAllThreads == true)
                    return;
                Thread.Sleep(5);

                #region  Route CAN Messages between plugins
                foreach (PluginInstanceRecord PSrc in ActivePlugins)
                {
                    if (PSrc.Plugin.PluginInterfaceType == CAN_INTERFACE_TYPE.READ_WRITE || 
                        PSrc.Plugin.PluginInterfaceType == CAN_INTERFACE_TYPE.WRITE_ONLY)
                    {
                        lock (PSrc.Plugin.OutgoingCANMsgQueue)
                        {
                            while (PSrc.Plugin.OutgoingCANMsgQueue.Count > 0)
                            {
                                try
                                {
                                    CANMsg M = PSrc.Plugin.OutgoingCANMsgQueue.Dequeue();

                                    foreach (PluginInstanceRecord PDest in ActivePlugins)
                                    {
                                        if (PSrc.PluginInstanceID != PDest.PluginInstanceID)
                                        {
                                            if (PDest.Plugin.PluginInterfaceType == CAN_INTERFACE_TYPE.READ_WRITE ||
                                                PDest.Plugin.PluginInterfaceType == CAN_INTERFACE_TYPE.READ_ONLY)
                                            {
                                                PDest.Plugin.IncomingCANMsgQueue.Enqueue(M);
                                            }
                                        }
                                    }
                                }
                                catch (Exception Ex)
                                {
                                    CANHostLog.IncomingMessages.Enqueue(Ex.Message);
                                }
                            }
                        }
                    }
                }
                #endregion

                #region Route General purpose messages between plugins

                foreach (PluginInstanceRecord PSrc in ActivePlugins)
                {
                    lock (PSrc.Plugin.OutgoingPluginMessage)
                    {
                        while (PSrc.Plugin.OutgoingPluginMessage.Count > 0)
                        {
                            try
                            {
                                String M = PSrc.Plugin.OutgoingPluginMessage.Dequeue();

                                PluginMessageLog.Write("[" + PSrc.Plugin.PluginName + ":" + PSrc.PluginInstanceID + "] " + M);

                                if (M.Substring(0, 1) == "@")
                                {
                                    foreach (PluginInstanceRecord PDest in ActivePlugins)
                                    {
                                        if (PSrc.PluginInstanceID != PDest.PluginInstanceID)
                                            PDest.Plugin.IncomingPluginMessage.Enqueue(M);
                                    }
                                }
                            }
                            catch (Exception Ex)
                            {
                                CANHostLog.IncomingMessages.Enqueue(Ex.Message);
                            }
                        }
                    }
                }

                #endregion

            }
        }

        #endregion

        void KillPluginHost()
        {
            try
            {
                if (ActivePlugins != null)
                {
                    foreach (PluginInstanceRecord P in ActivePlugins)
                    {
                        P.Plugin.Terminate();
                    }
                }

                KillAllThreads = true;
                PluginProcessThread.Abort();
                PluginProcessThread = null;
            }
            catch
            {

            }
        }

        void CheckForPluginTerminationRequests()
        {
            bool PluginsRemoved = false;

            for (int i = 0; i < ActivePlugins.Count; i++)
            {
                PluginInstanceRecord P = (PluginInstanceRecord)ActivePlugins[i];
                //Check to see if 
                if (P.Plugin.RequestTermination == true)
                {
                    CANHostLog.Write(P.Plugin.PluginName + " with Instance ID " + P.PluginInstanceID + " is requesting termination");
                    if (P.Plugin.Terminate() != "OK")
                    {
                        CANHostLog.Write("Plugin did not return 'OK' from Terminate()");
                    }
                    CANHostLog.Write("Removing Plugin from pool");
                    P.Plugin = null;
                    ActivePlugins.RemoveAt(i);
                    PluginsRemoved = true;
                }
            }
            if (PluginsRemoved == true)
                UpdateInstanceGrid();
        }
       
        void UpdateInstanceGrid()
        {
            MyInstanceMonitor.Clear();
            foreach(PluginInstanceRecord P in ActivePlugins)
            {

                Image PluginImage = P.Plugin.PluginImage;

                if (PluginImage == null)
                    PluginImage = trashCAN.Properties.Resources.Gear;

                MyInstanceMonitor.AddData(PluginImage,
                                          P.PluginInstanceID.ToString(),
                                          P.Plugin.PluginName,
                                          P.Plugin.PluginVersion);
            }

        }

        void AttemptToDestroyInstance(int InstanceID)
        {
            CANHostLog.Write("Destroying plugin instance " + InstanceID);

            for (int i = 0; i < ActivePlugins.Count; i++)
            {
                PluginInstanceRecord P = (PluginInstanceRecord)ActivePlugins[i];
                
                if (P.PluginInstanceID == InstanceID)
                {
                    P.Plugin.Terminate();
                    ActivePlugins.RemoveAt(i);
                }
            }
        }

        #region GUI Callbacks

        void SavePluginInfo()
        {
            string filename;
            saveFileDialog1.InitialDirectory = Directory.GetCurrentDirectory();
            DialogResult ret = saveFileDialog1.ShowDialog();
            if (ret == DialogResult.OK)
            { // then save
                try
                {
                    if (ActivePlugins != null)
                    {
                        foreach (PluginInstanceRecord P in ActivePlugins)
                        {
                            P.Plugin.SaveData();
                            Plugins.updateEntry(P);
                        }
                    }
                    filename = Path.GetFileName(saveFileDialog1.FileName);
                    Plugins.SaveList(filename);
                }
                catch
                {
                }
            }
        }
        void RestorePluginsFromFile()
        {
            openFileDialog1.InitialDirectory = Application.StartupPath;
            DialogResult ret = openFileDialog1.ShowDialog();
            if (ret == DialogResult.OK)
            {
                try
                {
                    Plugins.RestoreList(openFileDialog1.SafeFileName);
                    foreach (PluginInfoList.PluginInfo p in Plugins.ourList)
                    {
                        AddPluginToPool(p.NameWithVersion, p.CopyNumber, p.Position);
                    }
                }
                catch
                {
                }
            }

        }
        private void hostLogToolStripMenuItem_Click(object sender, EventArgs e)
        {
            CANHostLog.Show();
            CANHostLog.WindowState = FormWindowState.Normal;
            CANHostLog.BringToFront();
        }

        private void CANHost_FormClosing(object sender, FormClosingEventArgs e)
        {
            KillPluginHost();
        }

        private void pluginMessageLogToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PluginMessageLog.Show();
        }

        private void trashCANHost_Load(object sender, EventArgs e)
        {

        }

        private void pluginInstanceMonitorToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MyInstanceMonitor.Show();
            MyInstanceMonitor.WindowState = FormWindowState.Normal;
            MyInstanceMonitor.BringToFront();
        }

        void MI_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem S = (ToolStripMenuItem)sender;

            AddPluginToPool(S.Name);

        }
      
        #endregion

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MyAboutForm.Show();
        }

        private void restoreLayoutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RestorePluginsFromFile();
        }

        private void saveLayoutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SavePluginInfo();
        }


    }


    #region Helper Classes
    
    class UsablePluginInfo
    {
        public Type PluginDataType;
        public string AssemblyLocation;
        public string Version;
        public string Name;
        public Image Image;

        public UsablePluginInfo(Type T, string AL,string V,string N,Image Image)
        {
            this.PluginDataType = T;
            this.AssemblyLocation = AL;
            this.Version = V;
            this.Name = N;
            this.Image = Image;
        }
    }

    class PluginInstanceRecord
    {
        public ItrashCANPlugin Plugin;
        public int PluginInstanceID;
    }
    class PluginInfoList
    {
        public class PluginInfo
        {
            public string NameWithVersion;
            public UInt16 CopyNumber;
            public Rectangle Position;
        }
        public List<PluginInfo> ourList;
        public PluginInfoList()
        {
            ourList = new List<PluginInfo>();
        }
        public UInt16 Add(String pNameWithVersion, Rectangle pRect)
        {
            UInt16 copyCount = 1;
            PluginInfo pInfo = new PluginInfo();
            pInfo.NameWithVersion = pNameWithVersion;
            pInfo.Position = pRect;

            foreach (PluginInfo p in ourList)
            {
                if (p.NameWithVersion == pInfo.NameWithVersion) copyCount++;
            }
            pInfo.CopyNumber = copyCount;
            ourList.Add(pInfo);
            return copyCount;
        }
        public void updateEntry(PluginInstanceRecord pRecord)
        {
            string NameWithVersion = pRecord.Plugin.PluginName + ">" + pRecord.Plugin.PluginVersion;
            PluginInfo p = FindInfo(pRecord, pRecord.Plugin.Position);
            p.Position = pRecord.Plugin.Position;
        }
        PluginInfo FindInfo(PluginInstanceRecord pR, Rectangle pRect)
        {
            PluginInfo pRet = ourList[0];
            String testString;
            foreach (PluginInfo p in ourList)
            {
                testString = pR.Plugin.PluginName + ">" + pR.Plugin.PluginVersion;
                if (p.NameWithVersion == testString)    //Same plugin
                {
                    if (p.CopyNumber == pR.Plugin.CopyNumber)   //same copy
                    {
                        p.Position = pRect;
                        pRet = p;
                    }
                }
            }
            return pRet;
        }

        public void RestoreList(string pFilename)
        {
            String tString;
            String altDir = Directory.GetCurrentDirectory();
            altDir = altDir + "\\" + pFilename;
            TextReader objFile = File.OpenText(altDir);
            tString = objFile.ReadLine();   // Throw away header
            ourList.Clear();
            while ((tString = objFile.ReadLine()) != null)
            {
                string[] Parms = tString.Split(',');
                PluginInfo p = new PluginInfo();
                p.NameWithVersion = Parms[0];
                p.CopyNumber = (ushort)Convert.ToUInt16(Parms[1]);
                p.Position.X = Convert.ToInt32(Parms[2]);
                p.Position.Y = Convert.ToInt32(Parms[3]);
                p.Position.Width = Convert.ToInt32(Parms[4]);
                p.Position.Height = Convert.ToInt32(Parms[5]);
                ourList.Add(p);
            }
            objFile.Close();
        }
        public void SaveList(String pFilename)
        {
            String tString;
            String altDir = Directory.GetCurrentDirectory();
            altDir = altDir + "\\" + pFilename;
            TextWriter objFile = File.CreateText(altDir);

            objFile.WriteLine("NAME,COPY,X,Y,Width,Height");
            foreach (PluginInfo p in ourList)
            {
                tString = p.NameWithVersion + ",";
                tString = tString + p.CopyNumber.ToString() + ",";
                tString = tString + p.Position.X.ToString() + ",";
                tString = tString + p.Position.Y.ToString() + ",";
                tString = tString + p.Position.Width.ToString() + ",";
                tString = tString + p.Position.Height.ToString();
                objFile.WriteLine(tString);
            }
            objFile.Close();
        }
    }
    #endregion

}
