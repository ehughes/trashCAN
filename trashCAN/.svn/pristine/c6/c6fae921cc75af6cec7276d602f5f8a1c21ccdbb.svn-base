using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using ItrashCAN;
using System.IO.Ports;
using System.Threading;

namespace HPS
{
    public partial class HPSControlSurface : Form, ItrashCANPlugin
    {
        public HPSControlSurface()
        {
            InitializeComponent();

            HPSPort.Items.Clear();
            HPSPort.Items.AddRange(SerialPort.GetPortNames());
            HPSPort.SelectedIndex = 0;
        }

        SerialPort HPSSerialPort = new SerialPort();
        bool HPS_Enabled = false;

        #region Plugin Interface

        Queue<String> _OutgoingPluginMessage = new Queue<string>(64);

        public Queue<String> OutgoingPluginMessage
        {
            get { return _OutgoingPluginMessage; }
        }

        Queue<String> _IncomingPluginMessage = new Queue<string>(64);

        public Queue<String> IncomingPluginMessage
        {
            get { return _IncomingPluginMessage; }
        }

        public CAN_INTERFACE_TYPE PluginInterfaceType
        {
            get { return CAN_INTERFACE_TYPE.WRITE_ONLY; }
        }

        public String PluginName
        {
            get { return "HPS Power Supply Control Surface"; }
        }

        public String PluginVersion
        {
            get { return "0.1"; }
        }

        public Image PluginImage
        {
            get { return HPS.Properties.Resources.pictogram_din_w003_toxic; }
        }

        int _MyInstanceID;

        public int PluginInstanceID
        {
            get { return _MyInstanceID; }
            set { _MyInstanceID = value; }
        }

        public String Init()
        {
            _IncomingCANMsgQueue = new Queue<CANMsg>(1024);
            _OutgoingCANMsgQueue = new Queue<CANMsg>(1024);
            _IncomingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage = new Queue<string>(1024);
            _OutgoingPluginMessage.Enqueue("HPS Control Surface Plugin Initialized....");

            return "OK";
        }

        public String Terminate()
        {
            this.DestroyHandle();
            ShutDownHPSPort();
            this.Close();
            return "OK";

        }

        public void ShowPlugin()
        {
            this.Show();
            this.BringToFront();
            this.WindowState = FormWindowState.Normal;

        }

        public void HidePlugin()
        {
            this.Hide();
        }

        public void MinimizePlugin()
        {
            this.Show();
            this.WindowState = FormWindowState.Minimized;
        }

        public void MaximizePlugin()
        {
            this.Show();
            this.WindowState = FormWindowState.Maximized;
        }

        Queue<CANMsg> _IncomingCANMsgQueue = new Queue<CANMsg>(128);
        Queue<CANMsg> _OutgoingCANMsgQueue = new Queue<CANMsg>(128);

        public Queue<CANMsg> IncomingCANMsgQueue
        {
            get { return _IncomingCANMsgQueue; }
        }

        public Queue<CANMsg> OutgoingCANMsgQueue
        {
            get { return _OutgoingCANMsgQueue; }

        }

        bool _RequestTermination = false;

        public bool RequestTermination
        {
            get { return _RequestTermination; }
        }

        #endregion


        #region GUI Callbacks
        private void FormUpdateTimer_Tick(object sender, EventArgs e)
        {
            if (HPSSerialPort != null)
            {
                if (HPSSerialPort.IsOpen == false)
                {
                    OutputEnableButton.Enabled = false;
                    VoltageSetPoint.Enabled = false;
                    CurrentSetPoint.Enabled = false;
                    ConnectButton.Text = "Connect";
                }
                else
                {
                    OutputEnableButton.Enabled = true;
                    VoltageSetPoint.Enabled = true;
                    CurrentSetPoint.Enabled = true;
                    ConnectButton.Text = "Disconnect";

                }
            }
            else
            {
                  OutputEnableButton.Enabled = false;
                  VoltageSetPoint.Enabled = false;
                  CurrentSetPoint.Enabled = false;
            }

            if (HPS_Enabled == true)
            {
                OutputEnableButton.Text = "Disable Output"; 
            }
            else
            {
                OutputEnableButton.Text = "Enable Output"; 
            }

        
        }

        private void ConnectButton_Click(object sender, EventArgs e)
        {
            if(HPSSerialPort.IsOpen == true)
            {
                HPS_OUTPUT_OFF();
                int Tick = 0;
                while(HPSSerialPort.BytesToWrite > 0 && Tick <20)
                {
                    Thread.Sleep(100);
                    Tick++;
                }

                HPSSerialPort.Close();
            }
            else
            {
                HPSSerialPort.PortName = (string)HPSPort.SelectedItem;
                HPSSerialPort.Parity = Parity.None;
                HPSSerialPort.StopBits = StopBits.One;
                HPSSerialPort.Handshake = Handshake.None;
                HPSSerialPort.BaudRate = 115200;
                try
                {
                    HPSSerialPort.Open();
                }
                catch( Exception Ex)
                {
                    MessageBox.Show(Ex.Message,"Error opening HPS port");
                }
            }
        }

        #endregion

        void HPS_OUTPUT_OFF()
        {
            if (HPSSerialPort.IsOpen == true)
            {
                string cmd = "output off\r\n";
                HPSSerialPort.Write(cmd);
                HPS_Enabled = false;
            }
        }

        void HPS_OUTPUT_ON()
        {
            if (HPSSerialPort.IsOpen == true)
            {
                string cmd = "output on\r\n";
                HPSSerialPort.Write(cmd);
                HPS_Enabled = true;
            }
        }

        void HPS_SET_OUTPUT_VOLTAGE(int Voltage)
        {
            if (HPSSerialPort.IsOpen == true)
            {
                string cmd = "volt "+Voltage.ToString() +"\r\n";
                HPSSerialPort.Write(cmd);
            }
        }

        void HPS_SET_OUTPUT_CURRENT(int Current)
        {
            if (HPSSerialPort.IsOpen == true)
            {
                string cmd = "curr " + Current.ToString() + "\r\n";
                HPSSerialPort.Write(cmd);
            }
        }

        void ShutDownHPSPort()
        {
            HPS_OUTPUT_OFF();
            int Tick = 0;

            if (HPSSerialPort.IsOpen == true)
            {
                while (HPSSerialPort.BytesToWrite > 0 && Tick < 20)
                {
                    Thread.Sleep(100);
                    Tick++;
                }
                HPSSerialPort.Close();
            }

            
        }

        private void OutputEnableButton_Click(object sender, EventArgs e)
        {
            if (HPSSerialPort.IsOpen == true)
            {
                if (HPS_Enabled == true)
                {
                    HPS_OUTPUT_OFF();
                }
                else
                {
                    HPS_OUTPUT_ON();
                }
            }
        }

        private void HPSControlSurface_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = true;
            _RequestTermination = true;
        }

        private void VoltageSetPoint_ValueChanged(object sender, EventArgs e)
        {
            HPS_SET_OUTPUT_VOLTAGE((int)VoltageSetPoint.Value);
        }

        private void CurrentSetPoint_ValueChanged(object sender, EventArgs e)
        {
            HPS_SET_OUTPUT_CURRENT((int)CurrentSetPoint.Value);
        }

        private void HPSControlSurface_Load(object sender, EventArgs e)
        {

        }
    }
}
